{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-11-07T00:25:23.102606+00:00",
  "repo": "vcstuff/oid4vc-haip-sd-jwt-vc",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "pending-close",
      "description": "",
      "color": "860DE9"
    },
    {
      "name": "needs-implementation-experience",
      "description": "",
      "color": "5D0117"
    },
    {
      "name": "urgent",
      "description": "",
      "color": "7EDF80"
    },
    {
      "name": "OIDC.Federation",
      "description": "",
      "color": "C089AB"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJcWsFs5lUzvJ",
      "title": "Keys for DPoP should be attested to be highly secure",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/1",
      "state": "OPEN",
      "author": "awoie",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Let's make sure that keys we use for DPoP can be directly attested by the key attestation to be protected by the secure key store of the device (e.g. Secure Element, Secure Enclave etc.).",
      "createdAt": "2023-05-08T10:04:47Z",
      "updatedAt": "2023-05-16T09:55:48Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "let's also make sure it is optimization and not a requirement in client attestation draft.",
          "createdAt": "2023-05-13T15:34:42Z",
          "updatedAt": "2023-05-13T15:34:42Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would that be a DPoP extension?",
          "createdAt": "2023-05-16T09:55:48Z",
          "updatedAt": "2023-05-16T09:55:48Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOJcWsFs5l1z0B",
      "title": "A term alternative to \"verifiable credentials\"..?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/2",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "need a term that can be used to refer to both verifiable credentials and mdocs, that is not \"Verifiable Credentials\"\r\nsome suggestions: \r\n- digital credentials\r\n- Electronic attestations of attributes\r\n- verifiable attestations",
      "createdAt": "2023-05-13T13:31:06Z",
      "updatedAt": "2023-05-16T09:54:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Electronic attestations of attributes\" sounds good. However in the eIDAS context is one category of credentials whereas the other one is called \"Person Identification Data\" - so EAA would not be perceived as term for all kinds of credentials.\r\n\"verifiable attestations\" to me sounds very much like EAA.\r\n\r\nI think \"digital credentials\" is the best option.   \r\n\r\nPS: you know we will need to change the name of our spec family again once we pick a new term  ;-). I'm fine with that, just stating the obvious. ",
          "createdAt": "2023-05-16T09:54:36Z",
          "updatedAt": "2023-05-16T09:54:36Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOJcWsFs5l1z4o",
      "title": "[ed] URLs to the audience organizations",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/3",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "URLs to \"eIDAS 2.0, California Department of Motor Vehicles, Open Wallet Foundation (OWF), IDunion, GAIN\"",
      "createdAt": "2023-05-13T13:32:14Z",
      "updatedAt": "2023-05-24T22:33:01Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOJcWsFs5l10xy",
      "title": "Align and expand Scenarios/Business Requirements section ",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/4",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-13T13:42:24Z",
      "updatedAt": "2023-05-17T15:12:25Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "one from @awoie \r\n```\r\n- customer applies for VC, in-person  (pre-authz) or remote (authz code)\r\n- wallet requests access_token/credential\r\n- downstream process kicks off and decision needs to be made by some special officer and cannot be automated based on prior decisions/authorizations\r\n- wallet has to wait until decision was made\r\n- special officer makes decision\r\n- wallet requests token/credential again and token/credential endpoint can answer with final response.\r\n```",
          "createdAt": "2023-05-15T21:57:30Z",
          "updatedAt": "2023-05-15T21:57:30Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "also from @awoie \r\n\r\n> Would it make sense to specifically describe the following scenarios:\r\n> - high-security in-person provisioning with/without human in the loop in downstream processes\r\n> - high-security remote provisioning with/without human in the loop in downstream processes\r\n> - high-security online presentment, same device, cross-device (if we have a good solution for that).\r\n> \r\n> Would it make sense to suggest assurance levels according to eIDAS/NIST?",
          "createdAt": "2023-05-17T15:12:25Z",
          "updatedAt": "2023-05-17T15:12:25Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJcWsFs5l15aj",
      "title": "Note on JSON serialization and JAdES",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/5",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-13T14:38:43Z",
      "updatedAt": "2023-05-13T14:38:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOJcWsFs5l17Ho",
      "title": "issuer identifier - always HTTPS URL..?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/6",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Which HTTPS URL does the issuer use when x.509 is used? SAN? if we mandate issuer to do both x.509 and SAN, does that mean issuers must make sure /JWT-issuer is hosted under SAN? Isn\u2019t that pretty limiting? (I am not necessarily opposed to \u201ciss is always a URL, just trying to understand the implications)",
      "createdAt": "2023-05-13T14:53:32Z",
      "updatedAt": "2023-05-26T19:03:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "According to the feedback we got so far on the concept, I think SNA is the way to go. \r\n\r\nI see value in the proposal @tplooker made to always use the same kind of `iss` value. It is especially beneficial if the credential has both the x.509 cert chain and support for web based key resolution, since the verifier can choose what data to use for validation. \r\n\r\nIf the credential only has x.509, it doesn't matter in the end what identifier we use as long as the leaf cert binds that identifier to the public key of the issuer. So using the HTTPS URL doesn't hurt at least and might be inline with the way domain validated certs (and cWACs? @paulbastian) work. \r\n\r\nEven HTTPS URL with paths should work. I checked https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.6 and did not find an indication that this would not be possible. I mention it because as far as I remember someone stated that a SNA would only contain a URL with FQN but no path. \r\n\r\n> Isn\u2019t that pretty limiting?\r\n\r\nIn my opinion, the issuer can freely choose the URL so it should not become a limitation. However, I also think we need implementors' feedback. ",
          "createdAt": "2023-05-16T09:49:48Z",
          "updatedAt": "2023-05-24T22:36:48Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree using iss field for x509 as well. It has the advantage of having a common identifier for both mechanisms. EV and QWAC work the same way",
          "createdAt": "2023-05-16T10:40:51Z",
          "updatedAt": "2023-05-16T10:40:51Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "If the goal of the x5c is the key attestation, this works fine.\r\n\r\nIf instead policies and additional information like metadata are required, x5c simply doesn't work unless it would be \"inflated\" with custom elements for carrying metadata and policies and grants. That from what can be said about x509, inflating it so much would be like making an 80-year-old man do bodybuilding!\r\n\r\nI suggest the inclusion of OIDC Federation Trust chain in this profile, that's both web attested key and chain of verifiable statements issued by more than a single party.\r\n\r\nthe key question is: what defines the level high? key attestations (as oidc core did for years) or a high level would bring also grants/policies, metadata and all the interop schema as high verifiable and assured?\r\n\r\nSince every issued VC or any kind of attestation should not be repudiable in the future, that's something pertaining the assurance level I think",
          "createdAt": "2023-05-20T20:29:33Z",
          "updatedAt": "2023-05-21T21:49:57Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@peppelinux This issue is about the question what the identifier of an issuer is in a VC. Since we are leaning towards using a HTTPS URL, that would work for federation, too. ",
          "createdAt": "2023-05-22T07:38:01Z",
          "updatedAt": "2023-05-22T07:38:01Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I agreed, since federation only uses HTTPs but from Draft 29 there's the trust_chain JWS header claim that allows metadata, keys and policies attestation even in offline flows\r\n\r\nan https alone is not attestable in offline flows and x509 doesn't have metadata, policies and trust marks/additional-VCs in it related to the issuer\r\n\r\nfederation trust_chain has",
          "createdAt": "2023-05-22T20:42:19Z",
          "updatedAt": "2023-05-22T20:42:19Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@peppelinux \r\nI have to admit I don't fully understand your arguments. This issue is about the value of the `iss` value in the credential. A HTTPS URL works fine with OpenID Federation as well, right? So I don't see a problem. ",
          "createdAt": "2023-05-23T07:06:11Z",
          "updatedAt": "2023-05-23T07:06:11Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "yes, I went quite out of the border\r\n\r\nThe question is there any interest to have different kind of issuer identifiers?\r\n\r\nI'm in favor of HTTP URLs, even if there may be some cases where a did resolution methods resolve to HTTPs URL as well, as discussed in the issue below:\r\nhttps://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/41#issuecomment-1546743042\r\n\r\nAnyway, if there are milestone in this project this question doesn' seem a priority since that this profile can satisfy its scope using HTTPs URL\r\n\r\nso accept my excuse for the noise, it was just for sharing\r\n\r\n",
          "createdAt": "2023-05-23T17:29:21Z",
          "updatedAt": "2023-05-23T17:29:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think what I would like to see is a clear validation logic, something like:\r\n- when only x509 is used (kid JOSE header is not present), iss is a SAN. when verifying, must be an absolute match btw the value in iss and x509 leaf cert.\r\n- when only web PKI based approach is used (x5c JOSE header is not present), iss is a URL where the key is hosted, it can include path and subdomain.\r\n- when both x509 and web PKI based are used (both x5c and kid header is present), iss is a URL where the key is hosted, can include path and subdomain. Verifier must strip down path and subdomain and use only the domain when comparing with the SAN in x509 cert.\r\n\r\nnot sure it is clean to use header parameters as a switch, but that's how the verifier will determine which mechanism is used, right?\r\n\r\ndon't know if it is a limitation, but essentially, Web PKI based approach must host the keys at the domain that is also in the x509 cert.",
          "createdAt": "2023-05-24T23:16:37Z",
          "updatedAt": "2023-05-24T23:16:37Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJcWsFs5l1_ZB",
      "title": "issuer key resolution requirements for each entity:",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/7",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-implementation-experience"
      ],
      "body": "there are currently two options for issuer key resolution: web PKI based one and X.509 based one. current text states, \"iissuer supports one of the options, wallet and verifier support both\", but @tlodderstedt is right that this will make the life of verifiers (and wallets) really hard. \r\nprobably need to discuss what it means for the issuer to support both x.509 and web pki based...",
      "createdAt": "2023-05-13T15:18:02Z",
      "updatedAt": "2023-05-26T21:53:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "since the revocation for x509 should be always attested with web retrieval mechanisms, and that x509 works for key attestation only and needs to be extended with custom attributes to satisfy the requirements for policies and metadata/capabilities retrieval\r\n\r\nI'm in favour of using federation trust_chain as the best way to go to satisfy all the requirements for a high assurance profile that attests also grants and capabilities and not just the identity of an entity\r\n\r\nthen the question would be, where are the requirements?\r\nIt is still a work in progress but in a way or another it is becoming part of our shared knowledge:\r\n\r\nhttps://docs.google.com/document/d/1Dk_8UmytCI4VhCx5VMnXmEzdXRvgJozGeq1GNHZOQik/edit#heading=h.jb7a7nddoxft",
          "createdAt": "2023-05-22T20:32:01Z",
          "updatedAt": "2023-05-22T20:32:01Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOJcWsFs5l2Ajy",
      "title": "client_id_scheme and client_assertion_type",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/8",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "need to discuss the relationship between `client_id_scheme` and `client_assertion_type`. \r\n- one way to think is: client_assertion_type acts as client_id_scheme so no need for a client_id_scheme\r\n- another is: client_id_scheme is about how to process client_id and how to obtain client metadata, while client_assertion_type is which client authentication type to use, so they cannot be the same.\r\n\r\nmaybe the question is, when client_assertion_type is wallet attestation, do we expect client metadata to be obtained from wallet attestation or can there be other options?",
      "createdAt": "2023-05-13T15:31:23Z",
      "updatedAt": "2023-05-16T09:35:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my opinion, `client_id_scheme` and `client_assertion_type` serve the same purpose. \r\n\r\n> maybe the question is, when client_assertion_type is wallet attestation, do we expect client metadata to be obtained from wallet attestation or can there be other options?\r\n\r\nWhat client metadata do you mean? redirect URI, crypto algorithms? I would expect them to be communicated using the standard mechanisms, either oob or using a suitable parameter (just saw `client_metadata` is not in the VCI spec yet). ",
          "createdAt": "2023-05-16T09:35:46Z",
          "updatedAt": "2023-05-16T09:35:46Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOJcWsFs5l2Am6",
      "title": "define \"ephemeral credential\" as a term..?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/9",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "from @peppelinux",
      "createdAt": "2023-05-13T15:31:58Z",
      "updatedAt": "2023-05-20T23:26:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "i personally don't think it is necessary..",
          "createdAt": "2023-05-13T15:32:10Z",
          "updatedAt": "2023-05-13T15:32:10Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "The meaning of ephemeral is given by the value its owner give to it, and then how she uses the credential\r\n\r\nat the same time using this term \"ephemeral\" we assume that the credential is a one-time-credential, while another case is vc used for specific audiences and requested/issued/obtained just for that, since it will be used more than a single time (audience constrained)\r\n\r\nbut at the same time, these are not properties of the credential itself, but the usage/scope given to these by its owner\r\n\r\ninteresting anyway :-)\r\n\r\n",
          "createdAt": "2023-05-20T23:25:48Z",
          "updatedAt": "2023-05-20T23:26:17Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOJcWsFs5l2CwV",
      "title": "`client_id` value of the wallet during issuance",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/10",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "The text current wallet attestation draft says:\r\n> The JWT MUST contain a \"sub\" (subject) claim with a value corresponding to the \"client_id\" of the OAuth client.\r\n\r\nthe thing is.. when there has been no pre-existing relationship between the issuer and the wallet, which `client_id` value does the wallet uses..?",
      "createdAt": "2023-05-13T15:55:49Z",
      "updatedAt": "2023-05-25T13:55:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "discussed with @tlodderstedt. `sub` is a self-attested value from the wallet front end to the wallet backend. the issuer does not really need to understand `sub`, more imp for audit trails and user consent. ",
          "createdAt": "2023-05-13T16:41:15Z",
          "updatedAt": "2023-05-13T16:41:15Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@paulbastian what do you do in your current implementation?",
          "createdAt": "2023-05-16T09:17:25Z",
          "updatedAt": "2023-05-16T09:17:25Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I suggest the jwk thumbprint value for the sub value (and consequently for the client_id in the issuance flow)\r\n\r\nthe sub will be always derived from the cnf.jwk, producing a privacy-preserving value since it would be like a kid\r\n\r\nthis proposal assumes that the wallet instance could only be tracked with its public key, considering that it should have/use more than a single key, the risk is mitigated",
          "createdAt": "2023-05-22T20:26:56Z",
          "updatedAt": "2023-05-22T20:26:56Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The `sub` could just be set to a fix value per wallet provider (most likely sub==iss). This is sufficient for authorization and auditing and it is privacy preserving since the wallet instances cannot be identified. ",
          "createdAt": "2023-05-23T07:14:33Z",
          "updatedAt": "2023-05-23T07:14:57Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I'm not in favour of sub == iss since Wallet Provider and Wallet Instance are different subjects\r\n\r\nthe Wallet Provider (iss) issues the Wallet Instance Attestation to a Wallet Instance (sub), so these are definitively different\r\n\r\nif we admit that the only way to identify/trace a wallet instance is exploiting the public key (used in Holder binding) ad that the Wallet Instance should have more than a key and obtain fresh documents with a different key, we may assume that the subject identifier if the key, that's not unique, and that from this it could be derived the sub value",
          "createdAt": "2023-05-23T17:33:02Z",
          "updatedAt": "2023-05-23T17:33:02Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my mental model, the sub is the client id the wallet uses to perform authorization and auditing. I would assume that happens on the level of the wallet provider (or wallet product) but not on instance level. ",
          "createdAt": "2023-05-25T13:55:12Z",
          "updatedAt": "2023-05-25T13:55:12Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOJcWsFs5l2GA9",
      "title": "value of `client_id_scheme`...",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/11",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The value of the `client_id_scheme` parameter MUST be `wallet_attestation`.",
      "createdAt": "2023-05-13T16:42:02Z",
      "updatedAt": "2023-05-16T09:30:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where would we use this client id scheme?",
          "createdAt": "2023-05-14T07:54:59Z",
          "updatedAt": "2023-05-16T09:30:36Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOJcWsFs5l2G0q",
      "title": "relationship between `sub` and pop key in wallet attestation",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/12",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@peppelinux: a client_id or a sub value for this use case can be derived with a simple thumbprint value of the cnf.jwk, just to bind the identity of the wallet instance to one of its public key\r\n\r\nI would suggest to leave this choice whether to bind sub and pop key to the wallet frontend",
      "createdAt": "2023-05-13T16:54:14Z",
      "updatedAt": "2023-05-25T13:57:14Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "this issue is related to the doubts on removing client_id from the token endpoint (issuance phase)\r\n\r\nI'm in favor to keep client_id since there's a legacy schema for the token endpoint that we are technically able to respect, so I'd not break an existing token endpoint, keeping the client_id as it is using a resonable strategy to create it for the wallet instance without breaking privacy (multiple client_id each one derived from a public key of the wallet instance)",
          "createdAt": "2023-05-22T20:22:19Z",
          "updatedAt": "2023-05-22T20:22:19Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see a reason for having a relationship between sub and the pop key. I think the sub could just be set to the wallet provider name/ id. ",
          "createdAt": "2023-05-23T07:16:49Z",
          "updatedAt": "2023-05-23T07:16:49Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "Is this thread also relate to the one below?\r\nhttps://github.com/vcstuff/high-assurance-profile/issues/10#issuecomment-1559871971",
          "createdAt": "2023-05-23T17:36:07Z",
          "updatedAt": "2023-05-23T17:36:07Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yep",
          "createdAt": "2023-05-25T13:57:14Z",
          "updatedAt": "2023-05-25T13:57:14Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOJcWsFs5l9KTr",
      "title": "[placeholder] add trust mechanism in the future versions ",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/13",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "currently out of scope, but agreement to add before final",
      "createdAt": "2023-05-15T17:41:50Z",
      "updatedAt": "2023-05-22T07:45:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the profile with key resolution and identifier authentication adds a lot in terms of interoperability. On the other hand, there are so many different technical means to manage trust, we will have a hard time to pin down THE one or two to endorse by the profile. I don't think we should delay publication due to this topic. ",
          "createdAt": "2023-05-16T09:29:48Z",
          "updatedAt": "2023-05-16T09:29:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "My only concern is that also this time new specifications are born that do not address the crucial issue of trust, in a paradigm where the citizen is at the center and consequently alone, considering that there's an important demand of the trust model, at a design level, and consequentially the demand the technical and implementation profiles for certifying trust.\r\n\r\nConsidering that profiles for attesting trust exist, it would be really important to at least reference them in this new spec (and answer simple questions, like the ones here: [draft-looker-oauth-attested-key-based-client- authentication](https://github.com/vcstuff/draft-looker-oauth-attested-key-based-client-authentication/issues/3#issuecomment-1555952616)) by giving some non normative example about how to deal with these, in this new specs.\r\n\r\nin addition to the concern, I want to remove the fear that not wanting/being able to deal with the issue of trust, consequently it will not be dealt with at all, leaving a huge design hole that would allow anyone to do it \"in their own way\" and with clear security risks.",
          "createdAt": "2023-05-20T20:18:12Z",
          "updatedAt": "2023-05-20T20:19:00Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One step after the other. Our first concern is to provide interoperability across implementations of OID4VC with SD-JWT on a global basis. And as always, interoperability means to reduce optionality. On the other hand, less optionality also reduces the number of potential implementations, since not all requirements can be covered. So we need to make sure we provide interop while having an broad enough scope for adoption. So we are not only looking for eIDAS ARF, we are also, for example, looking for small business intending to get something out onto the streets this year. In their deployments, trust might be as simple as the wallets and verifiers having a list of issuers (as a list of URLs). eIDAS ARF will certainly use other mechanisms, other deployments around the globe will perhaps use other mechanisms, too. It's their responsibility, to add their mechanism to our (global) interop profile. Modularity is the key here. \r\nFor eIDAS ARF, I assume the ARF/rule books will add whatever is necessary. Perhaps ETSi will do that on the ling run.  ",
          "createdAt": "2023-05-22T07:45:26Z",
          "updatedAt": "2023-05-22T07:45:26Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOJcWsFs5l9LIs",
      "title": "Value of a custom URL scheme",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/14",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "current value is `haip` standing for \"high assurance interop profile\".\r\n\r\nif you come up with a better one, I will buy you a drink",
      "createdAt": "2023-05-15T17:44:43Z",
      "updatedAt": "2023-05-20T20:23:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "semantically, the question is <<High assurance interop profile, of what?>>\r\n\r\nthe schema should have at least a subject\r\n\r\nvc-hap://?\r\n\r\nbut, anyway, if there's an high level, where are the middle and the low?\r\nHigh is high in comparison to something that is less high :-)\r\n\r\naccording to what already made with ACR Values, we should define three levels and then say, this is \"high\" ",
          "createdAt": "2023-05-20T20:23:45Z",
          "updatedAt": "2023-05-20T20:23:45Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOJcWsFs5l-o5x",
      "title": "communicating extra wallet capabilities when obtaining the request object ",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/15",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "verifier sends a request_uri, when wallet hits that request_uri, it can communicate information such as version control. maybe using the headers. not urgent",
      "createdAt": "2023-05-15T22:11:01Z",
      "updatedAt": "2023-05-22T11:39:54Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "wallet capabilities should be attested in the wallet instance attestation\r\nwallet should submit its wallet instance attestation to the request_uri URL using the HTTP POST method",
          "createdAt": "2023-05-20T23:39:17Z",
          "updatedAt": "2023-05-20T23:39:17Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess this issue is about the verifier to wallet communication (presentation), specifically the callback from the wallet to the verifier at the request_uri. MSFT currently passes additional information in HTTP request headers to allow the verifier to produce a request object tailored for the capabilities of the wallet. We are considering to add this to the spec. \r\nI don't see why there is any attestation required.  ",
          "createdAt": "2023-05-22T07:30:20Z",
          "updatedAt": "2023-05-22T07:30:20Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "The Wallet Solution has many capabilities, these are attested by Wallet Provider to the Wallet Instance with the Wallet Instance Attestation, this latter should contain the policy and the interop metadata attesting the wallet instance capabilities and should be presented by Wallet Instance to prove its capabilities\r\n\r\nthis is the picture I have in mind",
          "createdAt": "2023-05-22T11:39:53Z",
          "updatedAt": "2023-05-22T11:39:53Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOJcWsFs5l-5KS",
      "title": "using a VC for Verifier Attestation",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/16",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the core idea is: \"Verifier obtains a VC from a trusted third party, a VC includes a key material of a Verifier, authorization request is signed using that key\". need to define a schema for that VC.",
      "createdAt": "2023-05-15T23:33:45Z",
      "updatedAt": "2023-05-20T23:30:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "this is what I have now: \"When the Client Identifier Scheme is `verifier_attestation`, the Client Identifier MUST equal `sub` claim value in the Verifier attestation JWT. The request MUST be signed with the private key corresponding to the public key in the `cnf` claim in the Verifier attestation JWT. The Verifier attestation VC MUST be added to a newly defined `verifier_attestation` JOSE Header of a request object. The Wallet MUST validate the signature on the Verifier attestation JWT by a trusted third party. Verifier metadata MUST be obtained from the Verifier attestation JWT.\"",
          "createdAt": "2023-05-16T03:05:58Z",
          "updatedAt": "2023-05-16T03:05:58Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just check back with ppl from ETSi. They are in favor of (in addition to x.509 for qWACs and qSeals) having a VC-based mechanism for Verifier authentication.  ",
          "createdAt": "2023-05-16T15:27:05Z",
          "updatedAt": "2023-05-16T15:27:05Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "we are not forced in using verifier_attestation JOSE claim, since we may use a trust_chain jose claim\r\n\r\nthe attestation is flat, while the trust chain attests all the trust relationships between the parties that attests the accreditation status of an entity, without a central registry",
          "createdAt": "2023-05-20T23:30:52Z",
          "updatedAt": "2023-05-20T23:30:52Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOJcWsFs5mFYZA",
      "title": "add back client_metadata?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/17",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I left it out in the first pass.\r\nany protocol-related parameter that can be passed in the client_metadata like `subject_syntax_types_supported` is hard-coded in the profile. \r\nif there is a need to verifier related metadata like `logo_url`, `client_name`, etc. we should add it back",
      "createdAt": "2023-05-16T20:20:35Z",
      "updatedAt": "2023-05-22T20:15:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "federation trust_chain bring the verifier metadata in the trust attestation, and the federation_entity metadata defines a standard scheme for every kind of participant, this is here\r\n\r\nhttps://openid.net/specs/openid-connect-federation-1_0.html#section-4.7",
          "createdAt": "2023-05-22T20:15:39Z",
          "updatedAt": "2023-05-22T20:15:39Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOJcWsFs5mFZaL",
      "title": "attestation of the key signing SIOP ID Token",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/18",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "do we assume that the key used for the signature of the SIOPv2 id token must be attestable with a wallet instance attestation? from @peppelinux",
      "createdAt": "2023-05-16T20:24:05Z",
      "updatedAt": "2023-06-17T18:59:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think so. it's the wallet (provider) that is being attested, not the key. Like for the issuance of credentials, where the wallet is attested and not the key the credential is bound to.",
          "createdAt": "2023-05-16T20:27:44Z",
          "updatedAt": "2023-05-16T20:27:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "My bad since I didn't understand.\r\n\r\nI assume that the SIOP, then the material issuer of the id token, is the Wallet Instance and not the Wallet Provider.\r\nI assume that a SIOP may issue an id token including the wallet instance attestation containing the public key used to verify the signature of the id token, since the wallet instance attestation has the holder binding\r\n\r\nthe verifier given the id token and the wallet instance attestation, is able to trust that the wallet is secure and compliat to eidas, considering that the Wallet Instance Attestation SHOULD contain the trust chain (or x5c...) to give the proof that the Wallet Provider, that's its issuer, is reliable and attestable as trustworthy ",
          "createdAt": "2023-05-20T20:36:26Z",
          "updatedAt": "2023-05-20T20:36:26Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I assume that a SIOP may issue an id token including the wallet instance attestation containing the public key used to verify the signature of the id token, since the wallet instance attestation has the holder binding\r\n\r\nI don't understand the meaning of \"since the wallet instance attestation has the holder binding\". \r\n\r\nOur concept for attestation is pretty simple. If the verifier wants an attestation of the wallet (along with the SIOP response), it requests a wallet attestation VC in the same transaction. So technical speaking, the verifier sends a combined SIOP + OID4VP request. The wallet attestation VC is the kind of VC used to authenticate towards issuers during credential issuance.  ",
          "createdAt": "2023-05-22T07:36:29Z",
          "updatedAt": "2023-05-22T07:36:29Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "> I don't understand the meaning of \"since the wallet instance attestation has the holder binding\".\r\n\r\n`cnf` claim in the payload of the Wallet Instance Attestation binds the holder public key in the JWS\r\n\r\n> it requests a wallet attestation VC in the same transaction.\r\n\r\nNot sure since the pseudonym should be also presented in offline flows. The Wallet Instance Attestation should expire and at the same time be usable in a configured time window\r\n\r\nif the wallet instance should have to ask a wallet instance attestation for every id token it issues the offline flows would not possible with pseudonymization\r\n\r\nI agree with your solution and at the same time I find the limits above, so I'd go for a wallet instance attestation usable in offline flows for pseudonymizations",
          "createdAt": "2023-05-22T20:13:50Z",
          "updatedAt": "2023-05-22T20:13:50Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> cnf claim in the payload of the Wallet Instance Attestation binds the holder public key in the JWS\r\n\r\nThat seems to me a pretty constrained concept. What is the reason for this tight coupling?\r\n\r\nre offline: wallet attestations can be pre-fetched (batch issuance) and used in offline scenarios, too. ",
          "createdAt": "2023-05-23T07:23:44Z",
          "updatedAt": "2023-05-23T07:23:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "how to establish that the wallet instance that has issued that id token is the same that own that wallet instance attestation, since this latter is the sole proof that the wallet instance is reliable?",
          "createdAt": "2023-05-23T17:38:11Z",
          "updatedAt": "2023-05-23T17:38:11Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is not the wallet instance issuing the id token, it is the holder. The attestation answers the question whether the wallet can be trusted to securely manage the keys on behalf of the holder. There is no need to create any relationship between the keys. ",
          "createdAt": "2023-05-25T13:52:20Z",
          "updatedAt": "2023-05-25T13:52:20Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi.\r\nThis is a very important discussion. \r\nQuestions:\r\na) How does the wallet instance attestation look like?\r\nb) Does wallet instance attestation contain information about the wallet keys?\r\nc) To my understanding Wallet Instance Attestation (WIA) is issued by the wallet provider to the wallet instance. I assume WIA is cryptographically bound to one of the keys managed in the wallet.\r\n\r\nIs the following statement correct (in the context of this specification): Since the wallet is in the same flow presenting a wallet attestation (presentation is signed by 1 key) and an ID token (can be signed by another key) the verifier trusts the ID token since it can trust the wallet attestation? In other words, if a box is attested so that I can trust it, I trust everything that comes out of that box?\r\nAssumption: Wallet attestation doesn't contain any info about the key used to sign the ID token.\r\n\r\nIf true, a MITM is possible (if wallet holder is rouge).",
          "createdAt": "2023-06-17T18:59:44Z",
          "updatedAt": "2023-06-17T18:59:44Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOJcWsFs5mFlpb",
      "title": "How to constrain PE",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/19",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "how to constraint `fields`: \r\n- path (can the JSONPath be constrained?)\r\n- filter (this is a JSON Schema! Must be constrained!)\r\n",
      "createdAt": "2023-05-16T21:04:09Z",
      "updatedAt": "2023-05-16T21:04:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 27,
      "id": "I_kwDOJcWsFs5mFp_J",
      "title": "requesting presentation of 1 out of n credentials",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/27",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "One way is to use \"submission_requirements\". Another, arguably easier, way is to just state that whatever is requested, the wallet will always respond with a single credential, so no need the submission_requirement at all.",
      "createdAt": "2023-05-16T21:26:34Z",
      "updatedAt": "2023-05-18T14:52:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have come to the conclusion that we should support multiple credentials in a response (for now at least). There are examples being discussed in the LSPs (PID + mDL) and the plugfest 3 (badge + work permit) with multiple credentials. I'm not sure the technical implementation in the end will require to return the credentials in the same response. However, we should at least allow for now and revisit later. ",
          "createdAt": "2023-05-18T14:52:58Z",
          "updatedAt": "2023-05-18T14:52:58Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOJcWsFs5mFqwt",
      "title": "\u201cVerifiable Credentials\u201d or \u201cDigital Credentials\u201d..?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/28",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Can we please rename \u201cVerifiable Credentials\u201d to \u201cDigital Credentials\u201d? that\u2019s the term already used in other OIDF whitepapers. to OID4DCI and OID4DCP and OID4DC",
      "createdAt": "2023-05-16T21:29:13Z",
      "updatedAt": "2023-05-16T21:29:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 29,
      "id": "I_kwDOJcWsFs5mK4ks",
      "title": "make iat in SD-JWT selectively disclosable during presentation",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/29",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "from @peppelinux\r\n> well, the \"human behaviour\" may create the practice to get you to update the PID on your birthday, producing a certain information leakage in the meaning of iat. I propose that iat should be in MAY and that there is no problem with making it opaque and SD",
      "createdAt": "2023-05-17T15:11:17Z",
      "updatedAt": "2023-05-17T15:11:17Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 30,
      "id": "I_kwDOJcWsFs5mRDYS",
      "title": "Requesting credentials with scope only",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/30",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> scope parameter MUST be communicated from the Issuer to the Wallet either in the Credential Offer, or Credential Issuer metadata.\r\n\r\nWe need to define the respective issuer metadata.",
      "createdAt": "2023-05-18T14:31:21Z",
      "updatedAt": "2023-09-26T04:21:00Z",
      "closedAt": "2023-09-26T04:21:00Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://bitbucket.org/openid/connect/pull-requests/520",
          "createdAt": "2023-06-09T00:29:11Z",
          "updatedAt": "2023-06-09T00:29:11Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOJcWsFs5mRQUg",
      "title": "JSON Serialization mandatory?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/31",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm not sure whether the profile should make the JSON Serialization mandatory. Are there libraries avalaible? Are there enough use cases justifying it? So far, I see JAdES as a technical mechanisms for long term validation only. But long term validation is a pretty advanced topic and might only be needed for some credentials. ",
      "createdAt": "2023-05-18T15:04:55Z",
      "updatedAt": "2023-06-09T00:35:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think JSON serialization should be mandatory as a starting point..\r\n",
          "createdAt": "2023-06-09T00:30:06Z",
          "updatedAt": "2023-06-09T00:30:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #46 ",
          "createdAt": "2023-06-09T00:35:04Z",
          "updatedAt": "2023-06-09T00:35:04Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOJcWsFs5ma4E_",
      "title": "Key attestation methods",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/32",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I read here\r\n\r\nhttps://github.com/vcstuff/high-assurance-profile/blob/main/draft-high-assurance-profile-oid4vc-sd-jwt-vc.md#issuer-identification-and-key-resolution-to-validate-an-issued-credential-issuer-key-resolution\r\n\r\nthat only x509 and .well-known/jwt-issuer MUST be supported\r\n\r\nAt the same time I have the \"perception\" that Federation has a higher level for the attestation of requirements and keys, since it brings metadata, policy and custom attestations (trust marks), and that todate we don't have clear requirements to compare x509 or .well-known/jwt-issuer more or less high.\r\n\r\nSince this new specification is dedicated to the High profile, I think it is appropriate to do a PR to obtain the JWS `trust_chain` header parameter within this new profile",
      "createdAt": "2023-05-20T23:50:03Z",
      "updatedAt": "2023-05-20T23:50:03Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOJcWsFs5mqfC4",
      "title": "Move Credential Refresh to Implementation Consideration",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/34",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the profile requires the implementation of Refresh Tokens for Credential refresh. This is especially needed for refresh of short living credentials and for gathering fresh copies of RP-specific/ephemeral credential. \r\n\r\nThose might be edge cases, so I suggest to replace the hard requirement by an implementation consideration how to solve those scenarios. This will make the implementation of the profile easier.  ",
      "createdAt": "2023-05-23T16:20:53Z",
      "updatedAt": "2023-05-23T16:20:53Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 35,
      "id": "I_kwDOJcWsFs5mqfus",
      "title": "Issuer URL and x.509 certs",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/35",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Use of DNSname SAN in credentials with x5c and web based lookup forces hosting of the jwt-issuer metadata at the top of the FQDN. Can we relax the requirement and allow for issuer URLs with path components?",
      "createdAt": "2023-05-23T16:22:19Z",
      "updatedAt": "2023-06-22T23:45:43Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "copying comment form Issuer #6.\r\n\r\n---\r\nI think what I would like to see is a clear validation logic, something like:\r\n- when only x509 is used (kid JOSE header is not present), iss is a SAN. when verifying, must be an absolute match btw the value in iss and x509 leaf cert.\r\n- when only web PKI based approach is used (x5c JOSE header is not present), iss is a URL where the key is hosted, it can include path and subdomain.\r\n- when both x509 and web PKI based are used (both x5c and kid header is present), iss is a URL where the key is hosted, can include path and subdomain. Verifier must strip down path and subdomain and use only the domain when comparing with the SAN in x509 cert.\r\n\r\nnot sure it is clean to use header parameters as a switch, but that's how the verifier will determine which mechanism is used, right?\r\n\r\ndon't know if it is a limitation, but essentially, Web PKI based approach must host the keys at the domain that is also in the x509 cert.",
          "createdAt": "2023-05-24T23:17:55Z",
          "updatedAt": "2023-05-24T23:17:55Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "Oidc federation should be included in this specs since It Is a web pki that enables static trust chain to be submitted in a request or in any kind of jws, without requiring web Discovery to a domain name unless the chain Is not expired\r\n\r\n",
          "createdAt": "2023-06-22T23:45:43Z",
          "updatedAt": "2023-06-22T23:45:43Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOJcWsFs5nAk7v",
      "title": "private claims",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/37",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "urgent"
      ],
      "body": "see if we need to re-add the following sentence based on how [this PR](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108) in sd-jwt-vc does:\r\n> Further claims, either registered or private JWT claims, can be added to the credential as required by the respective credential type, or determined by the Issuer or the Holder. All claims that are not understood by implementations MUST be ignored, as defined in section 4, [@!RFC7519].",
      "createdAt": "2023-05-26T20:24:33Z",
      "updatedAt": "2023-07-06T11:25:21Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 38,
      "id": "I_kwDOJcWsFs5nAqbZ",
      "title": "remove hb jwt requirement once it is mandatory in sd-jwt vc",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/38",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Conditional to https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/110",
      "createdAt": "2023-05-26T20:47:58Z",
      "updatedAt": "2023-05-26T20:47:58Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOJcWsFs5nAxJu",
      "title": "do we need to define key size?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/39",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "just for the reference [FAPI](https://openid.net/specs/openid-financial-api-part-1-1_0.html) defines\r\n\r\n> - shall require and use a key of size 2048 bits or larger for RSA algorithms;\r\n> - shall require and use a key of size 160 bits or larger for elliptic curve algorithms;",
      "createdAt": "2023-05-26T21:14:58Z",
      "updatedAt": "2023-05-28T11:43:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@danielfett @paulbastian What do you think?",
          "createdAt": "2023-05-28T11:34:07Z",
          "updatedAt": "2023-05-28T11:34:07Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would define a very limited number of crypto suites that shall be used, obviously ES256 but not so much else",
          "createdAt": "2023-05-28T11:43:59Z",
          "updatedAt": "2023-05-28T11:43:59Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOJcWsFs5nA2ET",
      "title": "relax refresh tokens requirement?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/41",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I was surprised to find that [FAPI](https://openid.net/specs/openid-financial-api-part-1-1_0.html) does not mandate refresh tokens. maybe this profile should also relax mandating refresh tokens..\r\n> the use of refresh tokens instead of long-lived access tokens for both public and confidential clients is recommended.",
      "createdAt": "2023-05-26T21:43:25Z",
      "updatedAt": "2023-05-28T11:32:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree to reconsider. We should be very sure and clear why we think refresh tokens are needed.\n\nIn my opinion, refresh tokens can help to achieve a better UX in the following cases:\n- Silent refresh of credentials, which is especially useful if the credential doesn't have a dynamic status management mechanisms. Given we will have that mechanism through the status list, we won't not necessarily need refresh tokens for this scenario.\n- Obtaining fresh copies of a credential that shall be used on a per RP basis or as ephemeral credentials. I don't see a compelling alternative to refresh tokens for this scenario. Do perhaps, we can make the use/implementation of refresh tokens depending on the privacy requirements of the deployment.",
          "createdAt": "2023-05-28T11:32:41Z",
          "updatedAt": "2023-05-28T11:32:41Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOJcWsFs5nLwjC",
      "title": "Add ARF reference",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/42",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-29T18:59:09Z",
      "updatedAt": "2023-05-29T18:59:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOJcWsFs5nTrq6",
      "title": "Define key resolution mechanisms for verifier attestation, wallet attestation, and status list issuers",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/43",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "urgent"
      ],
      "body": "The module drafts for client attestation (used for wallet attestation), verifier attestation (OID4VP) and status list define the schemas of the different assertions but do leave flexibility regarding the way keys are represented and resolved. The Interoperability profile will defines the concrete mechanisms to be used to achieve interoperability in the context of the profile. \r\n\r\nCurrent idea is to support the same mechanisms currently used for SD-JWT VCs, web based key lookup and x.509 certificates. We  could add one section with key resolution mechanisms and state where those are used. ",
      "createdAt": "2023-05-31T00:52:51Z",
      "updatedAt": "2023-07-06T11:24:40Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOJcWsFs5nTr90",
      "title": "Integrate Client Assertions",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/44",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- define scheme for wallet attestation (on top of schema defined in client attestation draft)\r\n- ...",
      "createdAt": "2023-05-31T00:54:57Z",
      "updatedAt": "2023-07-06T11:24:23Z",
      "closedAt": "2023-07-06T11:24:23Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOJcWsFs5o1soR",
      "title": "Describe how SD-JWT VC profile ties into OID4VP security mechanisms ",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/47",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "urgent"
      ],
      "body": "Profile must describe how the `nonce` and `aud` in the HB JWT is determined from request parameters and context of the transaction. ",
      "createdAt": "2023-06-15T13:59:38Z",
      "updatedAt": "2023-07-06T11:24:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 48,
      "id": "I_kwDOJcWsFs5pAzGz",
      "title": "client_id_scheme doesn't support Federation",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/48",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "OIDC.Federation"
      ],
      "body": "In https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/draft-oid4vc-haip-sd-jwt-vc.html#section-5-1.5\r\n\r\nI read \r\n\r\n````\r\nclient_id_scheme value MUST be either x509_san_dns or verifier_attestation. Wallet MUST support both. Verifier MUST support at least one. (pending OID4VCI PR #524 for verifier_attestation)\r\n````\r\n\r\nthis is not compatible with the italian implementation that uses OIDC Federation, with a value of \"entity_id\"\r\nwe ask to extend this configuration using a wider approach\r\n\r\nlet's consider that for interop purpose both federation and x509 are used, this parameter is exclusive",
      "createdAt": "2023-06-17T12:42:39Z",
      "updatedAt": "2023-08-26T20:12:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "can we please first agree that we want to support OIDC.Fed in HAIP? None of the extension points of OID4VC in HAIP support OIDC.Fed because there is no such agreement. and for the reasons I stated in Issue #59, I am reluctant to add OIDC.Fed right now.",
          "createdAt": "2023-08-26T20:12:04Z",
          "updatedAt": "2023-08-26T20:12:04Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOJcWsFs5pBTbL",
      "title": "\"High-Assurance Level\" according to which act/regulation?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/49",
      "state": "OPEN",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\n\r\nTitle of this specification begins with High LoA ...\r\na) According to which regulation/specification/act?\r\nb) Are there other levels of assurance? \r\nc) What about low, qualified?\r\n\r\n- eIDAS v1\r\n- NIST\r\n- other?\r\n\r\nI'm asking since level of assurance is typically addressing\r\n- identification -> IAL\r\n- authentication -> AAL\r\n- e-signature/e-sealing (e.g., as per eIDAS)\r\n\r\nNamely, the profile defined in this document works with\r\n- any IAL/AAL\r\n- any e-signature/e-sealing assurance level",
      "createdAt": "2023-06-17T18:22:33Z",
      "updatedAt": "2023-06-17T18:23:00Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOJcWsFs5qxeXb",
      "title": "Add SD-JWT VC profile for OID4VC",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/50",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "urgent"
      ],
      "body": "also incorporate topics described in #47",
      "createdAt": "2023-07-06T11:21:36Z",
      "updatedAt": "2023-07-12T16:18:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #56 ",
          "createdAt": "2023-07-12T16:18:53Z",
          "updatedAt": "2023-07-12T16:18:53Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOJcWsFs5qxe1X",
      "title": "Add Wallet Attestation Profile",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/51",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "tlodderstedt"
      ],
      "labels": [
        "urgent"
      ],
      "body": "define how wallet attestation is implemented based on client attestation draft ",
      "createdAt": "2023-07-06T11:22:36Z",
      "updatedAt": "2023-07-12T16:18:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we also need to add claims to the `proof` issuance request parameter to indicate key type and user authentication method used to protect access to the key, so the issuer could refuse to process if its requirements are not met. I guess this also requires respective metadata to let the wallet know in advance what is required.",
          "createdAt": "2023-07-07T08:20:17Z",
          "updatedAt": "2023-07-07T08:20:17Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #52 ",
          "createdAt": "2023-07-12T16:18:42Z",
          "updatedAt": "2023-07-12T16:18:42Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOJcWsFs5sKxJ2",
      "title": "we should mandate the SVG file format for the logo, since it grants a high quality rendering in any kind of display resolution",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/58",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "              we should mandate the SVG file format for the logo, since it grants a high quality rendering in any kind of display resolution\r\n\r\n_Originally posted by @peppelinux in https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/56#discussion_r1263741725_\r\n            ",
      "createdAt": "2023-07-20T20:35:39Z",
      "updatedAt": "2023-07-20T22:42:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I totally agree that the requirements in the credential logo are not precise enough, I also like svg. However I think this is an issue that should be addressed for openid4vci",
          "createdAt": "2023-07-20T20:45:45Z",
          "updatedAt": "2023-07-20T20:45:45Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I don't totally disagree with you but I'd suppose that a specific web file format for a logo may have more sense in an implementation profile than a general purpose standard\r\n\r\njust some text with some guidance/consideration I think that would be good enough, but don't know then if here or in openid4vci :-)\r\n\r\n",
          "createdAt": "2023-07-20T22:42:53Z",
          "updatedAt": "2023-07-20T22:42:53Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOJcWsFs5s9MEv",
      "title": "I-D.terbu-sd-jwt-vc doesn't support OIDC Federation",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/59",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "OIDC.Federation"
      ],
      "body": "I-D.terbu-sd-jwt-vc doesn't support OIDC Federation, that's a webpki with trust chains and a solid alternative to X.509\r\n\r\n_Originally posted by @peppelinux in https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/56#discussion_r1269938935_\r\n\r\nTorsten's reply:\r\nnothing in the sd-jwt vc draft precludes use of OIDC Federation, in the same way as it does not preclude x.509\r\nHAIP mandates jwt issuer and x.509, adding another (mandatory to implement) option seems a complexity driver, but let's talk. Please open an issue about it as this PR is about a different topic.",
      "createdAt": "2023-07-30T15:40:32Z",
      "updatedAt": "2023-09-17T04:03:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We do not have an agreement to use OpenID Federation in HAIP right now. and I am honestly very reluctant to add it. X.509 approach does not need OIDC.Fed. and web PKI approach does not either, because it can be used together with a trusted list of Issuers/Verifiers and it is simpler then establishing the whole OIDC.Fed.",
          "createdAt": "2023-08-26T20:08:40Z",
          "updatedAt": "2023-08-26T20:08:40Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I never understood why, honestly.\r\n\r\nX.509 approach attests keys, as webPKI does. Federation attests metadata and trust marks as well and give a distributed approach to implement trusted lists.\r\n\r\nI have the fear that the pursuit of simplicity is reducing the functionality and requirements that will be needed later and then it will require custom extensions in X.509. \r\n\r\nLast but not least, the requirement of non-repudiation of the public keys published, which cannot be achieved with a webpki that offers keys in plain text.\r\n\r\nIt's easier to work with new generations of developers using JWT than X.509, it's easier to build a trust mark and use it as a long lived attestation, than to bloat X.509 with things it wasn't meant for. This is a though also in terms of design of the solution",
          "createdAt": "2023-09-01T23:30:49Z",
          "updatedAt": "2023-09-01T23:30:49Z"
        },
        {
          "author": "fmarino-ipzs",
          "authorAssociation": "NONE",
          "body": "Personally, I do not see any opposition between a pki x.509 and federation, nor any full overlap. On the contrary, federation is a well defined framework that allows for key attestation (possibly even using a pki x.509) and secure exchange of metadata (in addition to other useful features such as policy and trust marks).  If such a framework is available, it should at least be considered as an option in a high assurance profile, even if it is more difficult to implement. They are not exactly the same thing: federation is more than a x.509 pki. \n\nAs you know, we have already adopted federation in the Italian eID implementation profiles and we are planning to use it also for the national wallet solution as we consider very useful. And I am convinced that the adoption of federation will increase in the future.",
          "createdAt": "2023-09-04T21:24:24Z",
          "updatedAt": "2023-09-04T21:24:24Z"
        },
        {
          "author": "paultempleman",
          "authorAssociation": "NONE",
          "body": "I think @peppelinux makes an important point that we are talking about where is the \"Federation attests metadata and trust marks\" - in other words where should the meta data around the issuer and verifier be stored. In the GAIN POC the term \"Trusted Network\" is used. Additional meta data around issuers and verifiers (e.g. who is the organisation behind the issuer, verifier, who is privacy controller etc,) is going to be extremely important especially to create that \"Trusted Network\" especially for regulated industries and as governments increase regulation of digital platforms.\r\n\r\nI do think there are going to be different technical standards in this area emerge on how to create that trust both within and identity ecosystem/trust framework and between identity ecosystems/trust frameworks - including Government mandated standards - so I can see why there is debate over a particular standard being specified.\r\n\r\nSince this working group is focused on the issuer-holder-verifier, perhaps a way around this is to use the term \"verifiable data registry\" and add \"verifiable data registry\" column in 3.3. Standards where we already mention Issuer, Wallet, Verifier - which would allow us to specify which of the standards does the verifiable data registry\" need to adopt. This would allow us to add competing standards such as OIDC.Fed, pki.x509 etc. as a MAY in that fourth column. This would at least give implementers on what the alternative approaches are available to be used when implementing this group of specfications.\r\n\r\nI also not that the GAIN POC is currently referring to OpenID4IDA and OIDC.Fed within their work as a \"Discovery and Trust\" \"Control Plane\" and therefor there is logic in @peppelinux referring to OIDC.Fed. \r\n\r\nWould creating a fourth column \"verifiable data registry\" column in 3.3 and adding a row for OIDC.Fed with MAY in the fourth column be an acceptable path forward?\r\n\r\nIt may also be useful to add additional row in 3.3 for OpenID4IDA with a value of OPTIONAL.\r\n\r\nAs one of the key audiences of this specification is implementors of this group of standards I this it is important to provide guidance on what standards are available for implementors to choose on how and where that meta data should be created in order to create \"trust\" within the ecosystem.\r\n\r\nWhilst on the topic of identity trust, OIX comment \"For many types of transaction, digital or otherwise, organizations need to know who they are dealing with and what that person is able, or eligible, to do. The rise of Identity Theft means that organizations cannot rely on a person simply claiming to be who they are, independent verification and risk checks are required. Equally, genuine individuals may try to present false information about themselves in order to gain access to goods, services or environments that they do not have the eligibility for.\"\r\n\r\nThey are talking about an organisation being able to trust the individual. But they also miss the point that individuals also need to be able to trust the organisation (including the digital services they offer). As privacy regulation globally continues to shifts to protect the individual this meta data is going to be needed not only for the issuers and verifiers but also for the holder.",
          "createdAt": "2023-09-17T04:03:17Z",
          "updatedAt": "2023-09-17T04:03:17Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJcWsFs5vW1uX",
      "title": "Make pre-authorized code flow optional?",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/60",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "During the OAuth Security Workshop, Fabian's formal analysis highlighted that it is very hard to ensure the pre-auth code gets into the intended wallet. even when the PIN is used, if the QRcode with pre-auth code is scanned by a malicious wallet, chances are high that the user will type in the correct PIN received via a separate channel in the malicious wallet. \r\nAt the same time, I am reluctant to remove this flow, because it is important for the issuance when user authentication is done in-person in the government office.",
      "createdAt": "2023-08-26T20:20:32Z",
      "updatedAt": "2023-09-19T15:05:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would likely be countered by client attestation, however client attestation is probably not required but recommended?",
          "createdAt": "2023-08-27T11:31:12Z",
          "updatedAt": "2023-08-27T11:31:12Z"
        },
        {
          "author": "asharif1990",
          "authorAssociation": "NONE",
          "body": "I agree with Kristina and I think in the high assurance profile there is no place for pre-auth code flow. Furthermore, as it is mentioned in the OIDF workshop for the eIDAS expert group the pre-auth code flow is usable for scenarios that demand a lower level of security, and seems strange to me to see it in HAIP. We already shared our concerns regarding the usage of this flow [here](https://github.com/italia/eudi-wallet-it-docs/issues/3#issuecomment-1641667104).",
          "createdAt": "2023-09-06T14:38:55Z",
          "updatedAt": "2023-09-06T14:39:25Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this an issue with pre-authz code or cross device in general? I'm asking since cross device could be done with authz code flow, too. Not sure, however, this is more secure in any way. ",
          "createdAt": "2023-09-06T15:32:23Z",
          "updatedAt": "2023-09-06T15:32:23Z"
        },
        {
          "author": "asharif1990",
          "authorAssociation": "NONE",
          "body": "> Is this an issue with pre-authz code or cross device in general? I'm asking since cross device could be done with authz code flow, too. Not sure, however, this is more secure in any way.\r\n\r\nI agree that in the case of cross-device flow, the same attack vector is applicable for the authz code flow as well. However, in the case of the same device flow, another big problem with the pre-auth code flow is PIN phishing, while in the case of authz code flow is not applicable and we have PKCE to avoid the code injection/replay attacks. In the case of cross-device, the best we can do is integration available BCPs in the cross-device draft.",
          "createdAt": "2023-09-07T08:26:20Z",
          "updatedAt": "2023-09-07T08:26:20Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have checked back with Fabian. My conclusion: this issue always exists, if there is state from before the credential offer that is conveyed into the issuance process. So even if the authz code is used, if it is used in conjunction with `issuer_state`, we have the same problem. ",
          "createdAt": "2023-09-07T10:17:43Z",
          "updatedAt": "2023-09-07T10:17:43Z"
        },
        {
          "author": "fabian-hk",
          "authorAssociation": "NONE",
          "body": "@paulbastian I would like to point out that wallet attestation does not prevent the attack on the pre-authorized code flow, because the attacker can use an unmodified wallet on a device under his control to exchange the pre-authorized code for a credential.",
          "createdAt": "2023-09-12T14:40:56Z",
          "updatedAt": "2023-09-12T14:40:56Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@fabian-hk do you think that attack won't work with authorization code and `issuer_state`?  ",
          "createdAt": "2023-09-19T10:08:14Z",
          "updatedAt": "2023-09-19T10:08:14Z"
        },
        {
          "author": "fabian-hk",
          "authorAssociation": "NONE",
          "body": "Let us clarify what exactly we are talking about here. The attack I discovered during my formal security analysis assumes the following things:\r\n\r\n1. A malicious application is installed on the user's device\r\n2. The user selects the malicious application to process the credential offer\r\n\r\nAfter selecting the malicious app, the attacker can also ask for the user pin, which is not suspicious because the wallet is supposed to do that.\r\nAs mentioned above, the attack works even if wallet attestation is used, because the attacker injects the credential offer into an unmodified wallet.\r\nYou can see the procedure of the attack in this [sequence diagram](https://www.plantuml.com/plantuml/svg/VL5DQzj04BtlhnZSYmqfk3sQDiHEAIaKKkgMNW9bB8sZHTBiTcSsAltrtRKIUOCJw_W-tZozlHB5eB7lZBIMFGRieVOMtY-N1H9SvFhQ1QO0xvR695HjPJsomYQuGHAE0hldp1UHE1BMc9tx2xCRnoGAFxF-4ptOYcRmvgkzRtJJHJAGlZBWTflDJfeJPlOPMu9Vs7MaiomQciUWr18xGrn3kcZCCzDQ5QkM0cmfF50u6ANqZJKdtTInaBnQ4a-OiLvc1pmssi67jvTWL-CA6BKXJXPKwtXaCtaTgCuuTd2xtrD8H7AbAKufY6Bv7geewdgGgg6UxdXkHMwSw0NuGEjqnGNxZz8ZrdIH71I-MLuOTahWqXOv-h6IK4UL2k3J2kYzINGkCBnmlmZ9zBgm0Kehi7VXS16yPJCSScG5sxn8TSnoEGimWPDMnd_65sucD9C3dk-3HH_BFghSyHHl1dnwYn-k9ORlz2UIACpFJ0OVBoUrUCT2CCUg8f7Vck556LjKcx8tX8722afJJYt4HVHne8Mv8gvZt_q7).\r\nThis attack works whenever there is a state transfer from the issuer to the wallet application in the credential offer, and there is no further authentication of the user to the issuer after receiving the credential offer.\r\n@tlodderstedt To answer your question: The attack would also work with the ``issuer_state`` if there is no user authentication at the issuer after the authorization request is redirected to the issuer's authentication endpoint.",
          "createdAt": "2023-09-19T15:05:13Z",
          "updatedAt": "2023-09-19T15:05:13Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOJcWsFs5yBkSP",
      "title": "Wallet Instance error codes ",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/62",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "once this PR goes in (https://github.com/openid/OpenID4VCI/pull/64/files), we should probably add `insufficient_wallet_security` or something as an error code? for now, let's open an issue on this.\r\n\r\n_Originally posted by @Sakurann in https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/52#discussion_r1321313123_\r\n            ",
      "createdAt": "2023-09-26T08:47:46Z",
      "updatedAt": "2023-09-26T08:47:46Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 63,
      "id": "I_kwDOJcWsFs5yUeHY",
      "title": "register PE values with DIF Claim format Registry",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/63",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-28T17:22:34Z",
      "updatedAt": "2023-09-28T17:22:34Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 64,
      "id": "I_kwDOJcWsFs5y2vSJ",
      "title": "term \"wallet\" needs to be addred to the terminology.",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/64",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A place to point to is probably https://openid.github.io/OpenID4VCI/openid-4-verifiable-credential-issuance-1_0.html#section-2-3.30",
      "createdAt": "2023-10-04T20:45:02Z",
      "updatedAt": "2023-10-04T20:45:02Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 65,
      "id": "I_kwDOJcWsFs5zp3Vw",
      "title": "Key resolution for status list",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/65",
      "state": "OPEN",
      "author": "c2bo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 7.1. defines supported key resolution mechanisms to validate issued credentials. We do not define a mechanism to validate the status list with currently.\r\n\r\nImho, we should re-use the same key resolution mechanism that is used by the issuer - makes things easier to manage and implement. If people agree with this, I will create a PR to add a small text stating to re-use the same mechanism for status list validation.",
      "createdAt": "2023-10-12T16:27:26Z",
      "updatedAt": "2023-10-12T16:46:38Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 67,
      "id": "I_kwDOJcWsFs51cvEL",
      "title": "define typ value wallet-attestation+jwt",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/67",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-31T13:23:44Z",
      "updatedAt": "2023-10-31T13:23:44Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 68,
      "id": "I_kwDOJcWsFs51cxG9",
      "title": "replace cryptographic_binding_methods_supported 'did:example' value by 'jwk`",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/68",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-31T13:28:04Z",
      "updatedAt": "2023-10-31T13:28:04Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 69,
      "id": "I_kwDOJcWsFs51cy7N",
      "title": "first paragraph section 8 needs clarification",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/69",
      "state": "OPEN",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "What is the meaning of the first list (e.g. SD-JWT VC)? I guess it is a list of the places where ES256 must be used. I suggest to spell that out and also to spell the acronyms out (w.g. HB JWT).",
      "createdAt": "2023-10-31T13:31:48Z",
      "updatedAt": "2023-10-31T13:31:48Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 71,
      "id": "I_kwDOJcWsFs51lLLK",
      "title": "OpenID4VP: Replace redirect_uri with response_uri for Response Mode direct_post",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/71",
      "state": "OPEN",
      "author": "cryptphil",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The HAIP specifies in Section 5 for OpenID4VP that:\r\n\r\n> Response mode MUST be direct_post with redirect_uri as defined in Section 6.2 of [[OIDF.OID4VP](https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/draft-oid4vc-haip-sd-jwt-vc.html#OIDF.OID4VP)].\r\n\r\nHowever, `redirect_uri` must not be present when the Response Mode is `direct_post` as described in the OpenID4VP specs in Section [6.2-7.2](https://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#section-6.2-7.2):\r\n\r\n> If the redirect_uri Authorization Request parameter is present when the Response Mode is direct_post, the Wallet MUST return an invalid_request Authorization Response error.\r\n\r\nTherefore, I assume that the HAIP should use `response_uri` instead of `redirect_uri` which would align with the OpenID4VP specs.",
      "createdAt": "2023-11-01T16:15:22Z",
      "updatedAt": "2023-11-01T16:39:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think you are correct.\r\nTo complicate things, the 200 Response to this may again include a `redirect_uri` see: https://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#section-6.2-18.2",
          "createdAt": "2023-11-01T16:39:06Z",
          "updatedAt": "2023-11-01T16:39:06Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 33,
      "id": "PR_kwDOJcWsFs5RJ7Me",
      "title": "proposed changes after first review",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/33",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-23T14:44:18Z",
      "updatedAt": "2023-06-01T21:30:45Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "249c5778274af172f98f77e48819b4c3583a2620",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "tl-review",
      "headRefOid": "8628dff9ae0a5d6bec3f18b2d0891dad71437e4d",
      "closedAt": "2023-05-29T18:33:58Z",
      "mergedAt": "2023-05-29T18:33:58Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f39a98b4b4cd691eacce2bc4ed70c6ea0843d71a"
      },
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann incorporated your suggestions. Please review again. ",
          "createdAt": "2023-05-28T09:47:46Z",
          "updatedAt": "2023-05-28T09:47:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5V-p4w",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:05:02Z",
          "updatedAt": "2023-05-24T18:05:02Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nThis document is not a specification, but a profile. It refers to the specifications required for implementations to interoperate among each other and for the optionalities mentioned in the referenced specifications, defines the set of features to be mandatory to implement.\r\n```",
              "createdAt": "2023-05-24T18:05:02Z",
              "updatedAt": "2023-05-24T18:05:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-tv9",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:16:34Z",
          "updatedAt": "2023-05-24T18:16:35Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe profile uses OpenID for Verifiable Credential Issuance [@!OIDF.OID4VCI] and OpenID for Verifiable Presentations [@!OIDF.OID4VP] as the base protocols for issuance and presentation of Credentials, respectively. The credential format used in the profile are W3C Verifiable Credentials secured using Selective Disclosure for JWTs (SD-JWT) according to the VC Data Model v2.0 [@VC-DATA], designated as VC-SD-JWTs. Additionally, considerations are given on how deployments can perform a combined issuance of credentials in both VC-SD-JWT and ISO mdoc [@ISO.18013-5] formats.\r\n```",
              "createdAt": "2023-05-24T18:16:34Z",
              "updatedAt": "2023-05-24T18:16:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-v9J",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:22:52Z",
          "updatedAt": "2023-05-24T18:22:52Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "why did you remove `instance`?",
              "createdAt": "2023-05-24T18:22:52Z",
              "updatedAt": "2023-05-24T18:22:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-wxi",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:24:52Z",
          "updatedAt": "2023-05-24T18:24:53Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n* Protocol for User Authentication by the Wallet at a Verifier (SIOP v2)\r\n```",
              "createdAt": "2023-05-24T18:24:52Z",
              "updatedAt": "2023-05-24T18:24:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-xgp",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:26:11Z",
          "updatedAt": "2023-05-24T18:26:11Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nNote: The Authorization Code flow does not require a Credential Offer from the Issuer to the Wallet. However, it is included in the feature set of the Credential Offer because it might be easier to implement with existing libraries and on top of existing implementations than the pre-authorized code Grant Type.\r\n\r\nBoth sending Credential Offer same-device and cross-device is supported.\r\n```",
              "createdAt": "2023-05-24T18:26:11Z",
              "updatedAt": "2023-05-24T18:29:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-yCp",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:27:37Z",
          "updatedAt": "2023-05-24T18:27:37Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n* MUST support sender-constrained Tokens using a mechanism as defined in [@!I-D.ietf-oauth-dpop].\r\n\r\nBoth Wallet initiated and Issuer initiated issuance is supported.\r\n```",
              "createdAt": "2023-05-24T18:27:37Z",
              "updatedAt": "2023-05-24T18:27:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-zQj",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:31:11Z",
          "updatedAt": "2023-05-24T18:31:12Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "```suggestion\r\n   * Refresh tokens MUST be supported for credential refresh.\r\n   * Wallets MUST support deferred authorization by being able to process the Token error response parameters `authorization_pending` and `slow_down`, and the credential offer parameter `interval`.\r\n   * The wallet attestation JWT scheme is defined in (#wallet-attestation-schema).\r\n```",
              "createdAt": "2023-05-24T18:31:12Z",
              "updatedAt": "2023-05-24T18:32:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-z6_",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:33:03Z",
          "updatedAt": "2023-05-24T18:33:03Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "```suggestion\r\n* The Credential Issuer MUST publish a mapping of every Credential Type it supports to a scope value.\r\n```",
              "createdAt": "2023-05-24T18:33:03Z",
              "updatedAt": "2023-05-24T18:33:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-0lW",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:34:49Z",
          "updatedAt": "2023-05-24T18:34:50Z",
          "comments": [
            {
              "originalPosition": 136,
              "body": "```suggestion\r\n   * `client_id_scheme` value MUST be either `x509_san_dns` or `verifier_attestation`. Wallet MUST support both. Verifier MUST support at least one. (pending OID4VCI PR#485 for x509, need a OID4VCI PR on verifier_attestation)\r\n```",
              "createdAt": "2023-05-24T18:34:50Z",
              "updatedAt": "2023-05-24T18:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-0tS",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:35:14Z",
          "updatedAt": "2023-05-24T18:35:14Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "```suggestion\r\n   * As a way to invoke the Wallet, at least a custom URL scheme `haip://` MUST be supported. Implementations MAY support other ways to invoke the wallets as agreed by trust frameworks/ecosystems/jurisdictions, not limited to using other custom URL schemes.\r\n```",
              "createdAt": "2023-05-24T18:35:14Z",
              "updatedAt": "2023-05-24T18:35:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-0xi",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:35:24Z",
          "updatedAt": "2023-05-24T18:35:25Z",
          "comments": [
            {
              "originalPosition": 160,
              "body": "```suggestion\r\nAs credential format, VC-SD-JWT as defined in [!I-D.ietf-terbu-sd-jwt-vc] MUST be used.\r\n```",
              "createdAt": "2023-05-24T18:35:25Z",
              "updatedAt": "2023-05-24T18:35:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-8A8",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:56:30Z",
          "updatedAt": "2023-05-24T18:56:31Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "this seems duplicative with line 192. how about the order of 194 -> 192&196 consolidated?",
              "createdAt": "2023-05-24T18:56:30Z",
              "updatedAt": "2023-05-24T18:56:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-8M4",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:57:03Z",
          "updatedAt": "2023-05-24T18:57:03Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "I think this is an important note?",
              "createdAt": "2023-05-24T18:57:03Z",
              "updatedAt": "2023-05-24T18:57:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-8XO",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:57:30Z",
          "updatedAt": "2023-05-24T18:57:30Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "```suggestion\r\nNote: If there is a requirement to provide the Subject\u2019s identifier assigned and maintained by the Issuer, `sub` claim MAY be used. There is no requirement for a binding to exist between `sub` and `cnf` claims. See section X in [!I-D.draft-terbu-sd-jwt-vc] for implementation considerations.\r\n```",
              "createdAt": "2023-05-24T18:57:30Z",
              "updatedAt": "2023-05-24T18:57:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V-8qK",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:58:17Z",
          "updatedAt": "2023-05-24T18:58:18Z",
          "comments": [
            {
              "originalPosition": 201,
              "body": "```suggestion\r\nNote: If there is a requirement to communicate information about the verification status and identity assurance data of the claims about the subject, the syntax defined by [@!OIDF.ekyc-ida] SHOULD be used. It is up to each jurisdiction and ecosystem, whether to require it to the implementers of this profile.\r\n```",
              "createdAt": "2023-05-24T18:58:17Z",
              "updatedAt": "2023-05-24T18:58:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V_99u",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T22:29:53Z",
          "updatedAt": "2023-05-24T22:29:53Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "```suggestion\r\nThis profile supports two ways to represent and resolves the key required to validate the issuer signature of a VC-SD-JWT, web PKI-based key resolution and x.509 certificates.\r\n```",
              "createdAt": "2023-05-24T22:29:53Z",
              "updatedAt": "2023-05-24T22:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V_-TS",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T22:31:39Z",
          "updatedAt": "2023-05-24T22:31:40Z",
          "comments": [
            {
              "originalPosition": 226,
              "body": "I think we can remove this section (lines 215-217) since now HB JWT is defined in SD-JWT spec itself and oliver's draft mandates HB jwt?",
              "createdAt": "2023-05-24T22:31:40Z",
              "updatedAt": "2023-05-24T22:31:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5V_-cO",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "done reviewing. suggested some changes.",
          "createdAt": "2023-05-24T22:32:31Z",
          "updatedAt": "2023-05-24T22:32:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5WJMFC",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T06:28:33Z",
          "updatedAt": "2023-05-26T06:28:34Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "because I think the aim is to attest the wallet, not a certain instance - An issuer needs to know it is talking to a trustworthy wallet (wallet provider/product), not a certain instance",
              "createdAt": "2023-05-26T06:28:33Z",
              "updatedAt": "2023-05-26T06:28:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WLxIW",
          "commit": {
            "abbreviatedOid": "72f6e5d"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T10:31:07Z",
          "updatedAt": "2023-05-26T10:31:08Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "I agree. I proposed to remove it since literally the same sentence was in the vc-sd-jwt draft. I just checked and it seems the draft text has changed and explicitly states private claims are out of scope. Don't understand the rationale. \r\n<img width=\"675\" alt=\"image\" src=\"https://github.com/vcstuff/high-assurance-profile/assets/328358/0051bd74-5426-461b-a469-b84c42b7df52\">\r\n ",
              "createdAt": "2023-05-26T10:31:07Z",
              "updatedAt": "2023-05-26T10:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WLyFE",
          "commit": {
            "abbreviatedOid": "72f6e5d"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T10:33:37Z",
          "updatedAt": "2023-05-26T10:33:37Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "192 is \"It is at the discretion of the Issuer whether to use `exp` claim and/or a `status` claim to express the validity period of an SD-JWT-VC. The wallet and the verifier  MUST support both mechanisms\". I don't understand. \r\n",
              "createdAt": "2023-05-26T10:33:37Z",
              "updatedAt": "2023-05-26T10:33:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WL0mu",
          "commit": {
            "abbreviatedOid": "cdc2eb4"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T10:40:08Z",
          "updatedAt": "2023-05-26T10:40:08Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "Why would you call it web PKI? I think web based key resolution is sufficient. ",
              "createdAt": "2023-05-26T10:40:08Z",
              "updatedAt": "2023-05-26T10:40:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WL2r8",
          "commit": {
            "abbreviatedOid": "cdc2eb4"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T10:45:20Z",
          "updatedAt": "2023-05-26T10:45:20Z",
          "comments": [
            {
              "originalPosition": 226,
              "body": "The current text leaves it open and only requires the validation of the HB JWT, if present. \r\n\r\nhttps://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#name-presenting-verifiable-crede\r\n\r\nOur current text always requires a presentation to have the HB JWT. ",
              "createdAt": "2023-05-26T10:45:20Z",
              "updatedAt": "2023-05-26T10:45:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WPhZu",
          "commit": {
            "abbreviatedOid": "2a01d71"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T20:24:51Z",
          "updatedAt": "2023-05-26T20:24:52Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "ok, opened an issue/PR in sd-jwt-vc and an issue #37 in this repo",
              "createdAt": "2023-05-26T20:24:51Z",
              "updatedAt": "2023-05-26T20:24:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WPhfd",
          "commit": {
            "abbreviatedOid": "2a01d71"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T20:25:15Z",
          "updatedAt": "2023-05-26T20:25:15Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "ok..",
              "createdAt": "2023-05-26T20:25:15Z",
              "updatedAt": "2023-05-26T20:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WPhxB",
          "commit": {
            "abbreviatedOid": "2a01d71"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T20:26:26Z",
          "updatedAt": "2023-05-26T20:48:46Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "the line numbers moved because of the changes accepted. with the new lines, it will be 198 -> 196&200 consoludated.",
              "createdAt": "2023-05-26T20:26:26Z",
              "updatedAt": "2023-05-26T20:48:46Z"
            },
            {
              "originalPosition": 214,
              "body": "it's trust in the DNS sytem, that allows to trust the .well-known path. i thought it should be clearer",
              "createdAt": "2023-05-26T20:42:32Z",
              "updatedAt": "2023-05-26T20:48:46Z"
            },
            {
              "originalPosition": 226,
              "body": "oh wow, I thought we have agreed to make HB-JWT mandatory in sd-jwt vc. opened an [issue #110](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/110) there and here - issue #38",
              "createdAt": "2023-05-26T20:48:41Z",
              "updatedAt": "2023-05-26T20:48:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WUIe5",
          "commit": {
            "abbreviatedOid": "582a463"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-28T09:36:24Z",
          "updatedAt": "2023-05-28T09:36:24Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "reworked cnf/holder binding text",
              "createdAt": "2023-05-28T09:36:24Z",
              "updatedAt": "2023-05-28T09:36:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5WaemW",
          "commit": {
            "abbreviatedOid": "8628dff"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks great. Thank you!",
          "createdAt": "2023-05-29T18:33:46Z",
          "updatedAt": "2023-05-29T18:33:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOJcWsFs5RVmRE",
      "title": "very small editorials",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/36",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-25T11:59:30Z",
      "updatedAt": "2023-05-26T20:06:37Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "591a60c45c9a4d2b9323d4d89722be0effb7b88a",
      "headRepository": "peppelinux/high-assurance-profile",
      "headRefName": "patch-1",
      "headRefOid": "428c3ea09f585f0712048d1c7c21ff6c91f792df",
      "closedAt": "2023-05-26T20:06:37Z",
      "mergedAt": "2023-05-26T20:06:37Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "249c5778274af172f98f77e48819b4c3583a2620"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5WL23f",
          "commit": {
            "abbreviatedOid": "428c3ea"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "thanks",
          "createdAt": "2023-05-26T10:45:52Z",
          "updatedAt": "2023-05-26T10:45:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5WPcPY",
          "commit": {
            "abbreviatedOid": "428c3ea"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "thank you!",
          "createdAt": "2023-05-26T20:06:29Z",
          "updatedAt": "2023-05-26T20:06:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOJcWsFs5ReXSs",
      "title": "add support for PKCE for OID4VCI",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/40",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "needs discussion. might not be needed because there is wallet attestation, wallet/client is not really a public client",
      "createdAt": "2023-05-26T21:19:39Z",
      "updatedAt": "2023-06-01T21:30:48Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "249c5778274af172f98f77e48819b4c3583a2620",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "add-pkce",
      "headRefOid": "f4bd5589525ae9af91d4527b82a3dd3fc9f8f2e2",
      "closedAt": "2023-05-29T18:42:23Z",
      "mergedAt": "2023-05-29T18:42:23Z",
      "mergedBy": "tlodderstedt",
      "mergeCommit": {
        "oid": "7906c1907cfcfb13089d16878deff28393540149"
      },
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> needs discussion. might not be needed because there is wallet attestation, wallet/client is not really a public client\r\n\r\nPKCE is not only needed for public clients since an authorization code can be replayed with different \"instances\" of the same confidential client. The key point is whether every instance is identified and authenticated separately, in which case the code would be bound to that instance. I would not assume that wallet attestation allows the AS to identify a certain wallet/client instance, that seems a to strong assumption to me. ",
          "createdAt": "2023-05-28T09:51:11Z",
          "updatedAt": "2023-05-28T09:51:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5WULy-",
          "commit": {
            "abbreviatedOid": "f4bd558"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I think that makes sense. ",
          "createdAt": "2023-05-28T09:51:28Z",
          "updatedAt": "2023-05-28T09:51:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOJcWsFs5R10Jx",
      "title": "TL next review",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/45",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-31T23:25:29Z",
      "updatedAt": "2023-06-01T21:30:43Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7906c1907cfcfb13089d16878deff28393540149",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "tl-nextreview",
      "headRefOid": "db11dd725305d8758ec7faa56275117bed8b09b8",
      "closedAt": "2023-06-01T21:23:02Z",
      "mergedAt": "2023-06-01T21:23:02Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "56e2f114e3c0fd685de28276f20888f0d5742914"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5WzdzE",
          "commit": {
            "abbreviatedOid": "db11dd7"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-01T21:21:14Z",
          "updatedAt": "2023-06-01T21:21:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOJcWsFs5SkbQR",
      "title": "remove the requirement for the JSON serialization",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/46",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #31",
      "createdAt": "2023-06-09T00:34:56Z",
      "updatedAt": "2023-09-25T20:12:29Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "218029acf83d211d5262d14df554c85f14af7d71",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "json-serialization",
      "headRefOid": "d01f013fc4088215f39475ceab04f254d27b31e8",
      "closedAt": "2023-09-25T20:12:29Z",
      "mergedAt": "2023-09-25T20:12:29Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "32d07f83393b47df318b6a9f10f6c8551fd7342e"
      },
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is the usecase for having issuer multisignatures which enables handy PQC-safetyness, but its just another edge case for now, so I#m fine with this for now",
          "createdAt": "2023-06-13T19:53:12Z",
          "updatedAt": "2023-06-13T19:53:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5YB5pa",
          "commit": {
            "abbreviatedOid": "84b64d0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-13T11:11:22Z",
          "updatedAt": "2023-06-13T11:12:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n* Compact serialization MUST be supported as defined in [@!I-D.ietf-oauth-selective-disclosure-jwt]. JSON serialization MAY be supported.\r\n```",
              "createdAt": "2023-06-13T11:11:22Z",
              "updatedAt": "2023-06-13T11:12:53Z"
            },
            {
              "originalPosition": 8,
              "body": "I added the text to the bullet above and suggest to remove this line as it breaks the flow. The table must directly follow line 181.\r\n",
              "createdAt": "2023-06-13T11:12:46Z",
              "updatedAt": "2023-06-13T11:12:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5YF84H",
          "commit": {
            "abbreviatedOid": "84b64d0"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:53:25Z",
          "updatedAt": "2023-06-13T19:53:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5bdiyM",
          "commit": {
            "abbreviatedOid": "84b64d0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:18:37Z",
          "updatedAt": "2023-07-18T08:18:37Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-07-18T08:18:37Z",
              "updatedAt": "2023-07-18T08:18:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bdjD8",
          "commit": {
            "abbreviatedOid": "84b64d0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:19:13Z",
          "updatedAt": "2023-07-18T08:19:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "reflected",
              "createdAt": "2023-07-18T08:19:13Z",
              "updatedAt": "2023-07-18T08:19:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g9AOM",
          "commit": {
            "abbreviatedOid": "d01f013"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-14T10:51:34Z",
          "updatedAt": "2023-09-14T10:51:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5hQQhh",
          "commit": {
            "abbreviatedOid": "d01f013"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-18T17:40:39Z",
          "updatedAt": "2023-09-18T17:40:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5hRGvQ",
          "commit": {
            "abbreviatedOid": "d01f013"
          },
          "author": "c2bo",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-18T20:06:53Z",
          "updatedAt": "2023-09-18T20:06:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOJcWsFs5U5OLM",
      "title": "added wallet attestation scheme",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/52",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses # 51<!-- Issue # here -->\r\n\r\n## \ud83d\udcd1 Description\r\n<!-- Add a brief description of the pr -->\r\nThis PR adds a Wallet Attestation scheme to the spec. \r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/wallet-attestation/draft-oid4vc-haip-sd-jwt-vc.html)",
      "createdAt": "2023-07-07T08:59:59Z",
      "updatedAt": "2023-10-05T19:33:33Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "31d589cc6f7d36073c3c9ed19d62ef5b3f49f41a",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "wallet-attestation",
      "headRefOid": "4f880579579bf98d3e57974700437e82b541fe1c",
      "closedAt": "2023-10-05T18:56:55Z",
      "mergedAt": "2023-10-05T18:56:55Z",
      "mergedBy": "tlodderstedt",
      "mergeCommit": {
        "oid": "38753fc242aaaaf72e45171503f25054bd5a2576"
      },
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR is not complete yet. It lacks the list of values allowed (or at least ore-defined) for user authentication and key type. I would also like to suggest to adopt the WebAuthn attestation claims instead of defining new claims and values. \r\n\r\n[key-protection-types](https://fidoalliance.org/specs/common-specs/fido-registry-v2.2-rd-20210525.html#key-protection-types)\r\n\r\n[user-verification-methods](https://fidoalliance.org/specs/common-specs/fido-registry-v2.2-rd-20210525.html#user-verification-methods)",
          "createdAt": "2023-07-07T09:06:33Z",
          "updatedAt": "2023-07-07T09:06:33Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For a start I would recommend to limit the possible values as follows.\r\nKey protection Types:\r\n- Software\r\n- TEE\r\n- Strongbox\r\n- Secure Enclave\r\n- Secure Element\r\n\r\nUser Verification Methods:\r\n- System-Biometry\r\n- System-PIN\r\n- Internal-Biometry\r\n- Internal-PIN\r\n- SecureElement-PIN",
          "createdAt": "2023-07-07T16:44:20Z",
          "updatedAt": "2023-07-07T16:44:20Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@paulbastian can you please provide descriptions for the different values of key type and user authentication?",
          "createdAt": "2023-07-11T09:00:03Z",
          "updatedAt": "2023-07-11T09:00:03Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "feedback from the GAIN call: would it make sense to make user_authentication a multi value to carry all capabilities? WebAuthn does it this way for user authentication (userVerificationDetails) and key types (keyProtection). \r\nhttps://fidoalliance.org/specs/fido-v2.0-rd-20180702/fido-metadata-statement-v2.0-rd-20180702.html#widl-MetadataStatement-userVerificationDetails",
          "createdAt": "2023-07-13T12:05:21Z",
          "updatedAt": "2023-07-13T12:05:21Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "In the discussions in this PR,\r\n\r\n1. the **Wallet Provider** and the **Attester** are competing for the `iss` claim, and\r\n2. the **Per-Application** identifier, the **Per-Version** identifier and the **Per-Device** identifer are competing for the `sub` claim.\r\n\r\nEach of the concepts should have a separate claim in order to avoid conflicts. Otherwise, we would encounter technically troublesome issues in the future.",
          "createdAt": "2023-07-17T01:02:58Z",
          "updatedAt": "2023-07-17T01:02:58Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "I have a good opinion about the possibility to use the WIA to give more guidance about how a wallet instance metadata discovery can be made, thanks to it\r\n\r\nthat's why I'd propose the following OPTIONAL claims to attests the WI capabilities, exemplified below in a non normative way\r\n\r\n````\r\n  \"attested_security_context\": \"https://trust-framework.example.org/LoA/basic\",\r\n  \"authorization_endpoint\": \"haip:\",\r\n  \"response_types_supported\": [\r\n    \"vp_token\"\r\n  ],\r\n  \"vp_formats_supported\": {\r\n    \"jwt_vp_json\": {\r\n      \"alg_values_supported\": [\"ES256\"]\r\n    },\r\n    \"jwt_vc_json\": {\r\n      \"alg_values_supported\": [\"ES256\"]\r\n    }\r\n  },\r\n  \"request_object_signing_alg_values_supported\": [\r\n    \"ES256\"\r\n  ],\r\n  \"presentation_definition_uri_supported\": false,\r\n````",
          "createdAt": "2023-07-20T22:56:44Z",
          "updatedAt": "2023-09-19T14:30:16Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What we need is some metadata for the issuer to communicate, what asc(or key type) he accepts, with this information the wallet may analyze if it can provide this and make a specific request for a specific asc(with a specific key type) to the attestation service and the client attestation jwt then only contains this.\r\n\r\nA client attestation is less about the capabilities of the wallet in my opinion",
          "createdAt": "2023-07-21T13:11:25Z",
          "updatedAt": "2023-07-21T13:11:25Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In the discussions in this PR,\r\n\r\n>the Wallet Provider and the Attester are competing for the iss claim, and\r\nthe Per-Application identifier, the Per-Version identifier and the Per-Device identifer are competing for the sub claim.\r\nEach of the concepts should have a separate claim in order to avoid conflicts. Otherwise, we would encounter technically troublesome issues in the future.\r\n\r\nLooking onto it from an OAuth AS perspective, I think is important to define a) what kind of assertions the AS should process and b) how the client id is determined. \r\n\r\nFor a) all what matters is that the AS can look that value up and knows how to access the signing key. Whether that is a 3rd party or the wallet provider itself, can be determined by the deployment. \r\n\r\nFor b) I would stick to the definition of RFC 752 \"For client authentication, the subject MUST be the \"client_id\" of the OAuth client.\" That basically means client id values are at the discretion of the wallet assertion issuer. If the issuer decides to use ephemeral values, that's fine, too. ",
          "createdAt": "2023-09-18T14:22:52Z",
          "updatedAt": "2023-09-18T14:22:52Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "why was it merged? i still had request for changes",
          "createdAt": "2023-10-05T19:33:33Z",
          "updatedAt": "2023-10-05T19:33:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5ao4Vb",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-08T07:24:37Z",
          "updatedAt": "2023-07-08T07:37:38Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "In addition to what? To the claims defined in draft-ietf-looker?",
              "createdAt": "2023-07-08T07:24:37Z",
              "updatedAt": "2023-07-08T07:37:38Z"
            },
            {
              "originalPosition": 9,
              "body": "are the values taken from somewhere or defined in HAIP? If the latter, why not use snake case?",
              "createdAt": "2023-07-08T07:27:04Z",
              "updatedAt": "2023-07-08T07:37:38Z"
            },
            {
              "originalPosition": 10,
              "body": "Again, where are the values being defined..? If not in HAIP should it point somewhere?",
              "createdAt": "2023-07-08T07:36:10Z",
              "updatedAt": "2023-07-08T07:37:38Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\nTo obtain the issuer's Public key for verification, wallet attestions MUST support web-based key resolution as defined in Section 5 of [@!I-D.terbu-sd-jwt-vc]. The JOSE header `kid` MUST be used to identify the respective key.\n```\n",
              "createdAt": "2023-07-08T07:37:15Z",
              "updatedAt": "2023-07-08T07:37:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a00cU",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-11T08:59:10Z",
          "updatedAt": "2023-07-11T08:59:11Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "We define it in HAIP. I'm neutral on the style. Snake case would be consistent with https://fidoalliance.org/specs/common-specs/fido-registry-v2.2-rd-20210525.html#key-protection-types. ",
              "createdAt": "2023-07-11T08:59:10Z",
              "updatedAt": "2023-07-11T08:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a00mv",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-11T08:59:32Z",
          "updatedAt": "2023-07-11T08:59:32Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I would prefer to reuse WebAuthn values. Let's discuss.",
              "createdAt": "2023-07-11T08:59:32Z",
              "updatedAt": "2023-07-11T08:59:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a8uun",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-12T09:00:00Z",
          "updatedAt": "2023-07-12T09:17:42Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "if WebAuthn values are used I'm ok with that, we then need a ref to them",
              "createdAt": "2023-07-12T09:00:00Z",
              "updatedAt": "2023-07-12T09:17:42Z"
            },
            {
              "originalPosition": 12,
              "body": "Do we have to defined error codes and messages for that?",
              "createdAt": "2023-07-12T09:00:45Z",
              "updatedAt": "2023-07-12T09:17:42Z"
            },
            {
              "originalPosition": 27,
              "body": "I'm not in favor of duplicating iss to sub\r\n\r\nI have the strong assumption that the wallet provider and the wallet instance are different entities\r\n\r\nIn my current implementation we have decided to use the jwk thumbprint to identify the wallet instance and then we use this value in the sub\r\n\r\nthere's a good agreement to simply remove the sub claim, WDYT about this?",
              "createdAt": "2023-07-12T09:17:24Z",
              "updatedAt": "2023-07-12T09:17:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a873W",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T09:27:59Z",
          "updatedAt": "2023-07-12T09:27:59Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "It's not a duplication. It represents the fact that the wallet provider issues an attestation about itself. Whatever component uses this attestation with a valid proof of possession of the key in `cnf` can be considered a valid \"representative\" of the wallet provider. That is sufficient for authentication and authorization. \r\nThis value is especially used a `client_id`. If you want to make the client id instance specific, you can do so. I would prefer to have a client_id identifying the wallet provider. This information can be used in self service and customer care and makes sense to the user.  ",
              "createdAt": "2023-07-12T09:27:59Z",
              "updatedAt": "2023-07-12T09:28:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a884d",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T09:29:32Z",
          "updatedAt": "2023-07-12T09:29:33Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "you mean in the credential issuance response?",
              "createdAt": "2023-07-12T09:29:32Z",
              "updatedAt": "2023-07-12T09:29:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a8_CO",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T09:33:00Z",
          "updatedAt": "2023-07-12T09:33:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "In addition to \"the definition given in [!I-D.ietf-looker-key-attestation-client-authentication]\"",
              "createdAt": "2023-07-12T09:33:00Z",
              "updatedAt": "2023-07-12T09:33:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a_uLg",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T15:33:17Z",
          "updatedAt": "2023-07-12T15:33:17Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n* `key_type`: this claim asserts the security mechanism the wallet can use to manage private keys. This capability is based on the capabilities of the execution environent of the wallet, this might be a secure element (in case of a wallet residing on a smartphone) or a Cloud-HSM (in case of a cloud wallet). This specification defines the following values for `key_type`: `Software`, `TEE`, `Strongbox`, `Secure Enclave`, `Secure Element` and `External-HSM`.\r\n```",
              "createdAt": "2023-07-12T15:33:17Z",
              "updatedAt": "2023-07-12T15:33:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a_uso",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T15:34:09Z",
          "updatedAt": "2023-07-12T15:34:09Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  \"sub\": \"https://wallet.example.com/version/1.0.0\",\r\n```",
              "createdAt": "2023-07-12T15:34:09Z",
              "updatedAt": "2023-07-12T15:34:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5a_wxf",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-12T15:38:32Z",
          "updatedAt": "2023-07-12T15:38:33Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "With regard to eIDAS terms: `iss` describes the Wallet Solution Provider and `sub` descibes the specific Wallet Solution of a Wallet Instance",
              "createdAt": "2023-07-12T15:38:32Z",
              "updatedAt": "2023-07-12T15:38:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bFnWA",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T11:14:35Z",
          "updatedAt": "2023-07-13T11:14:36Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Can you please explain the rationale for the path extension?",
              "createdAt": "2023-07-13T11:14:36Z",
              "updatedAt": "2023-07-13T11:14:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bFn3A",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T11:15:56Z",
          "updatedAt": "2023-07-13T11:15:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "> sub descibes the specific Wallet Solution of a Wallet Instance\r\nwhich includes the option to leave instances anonymous, right?",
              "createdAt": "2023-07-13T11:15:57Z",
              "updatedAt": "2023-07-13T11:15:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bFu84",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T11:34:01Z",
          "updatedAt": "2023-07-13T11:34:02Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "With regard to eIDAS terms: iss describes the Wallet Solution Provider and sub descibes the specific Wallet Solution of a Wallet Instance",
              "createdAt": "2023-07-13T11:34:01Z",
              "updatedAt": "2023-07-13T11:34:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bFvOg",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T11:34:48Z",
          "updatedAt": "2023-07-13T11:34:48Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "yes, anonymous instances should be RECOMMENDED in my opinion",
              "createdAt": "2023-07-13T11:34:48Z",
              "updatedAt": "2023-07-13T11:34:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bRlsB",
          "commit": {
            "abbreviatedOid": "c5214b7"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-15T10:24:13Z",
          "updatedAt": "2023-07-15T10:24:13Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "yes, do we have to give a ref to openid4vc?",
              "createdAt": "2023-07-15T10:24:13Z",
              "updatedAt": "2023-07-15T10:24:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bRlyf",
          "commit": {
            "abbreviatedOid": "c5214b7"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-15T10:28:40Z",
          "updatedAt": "2023-07-15T10:29:06Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "do we assume that a single wallet provider may own multiple wallet solution?\r\n\r\nI assume that a single wallet provider owns a single wallet solution.\r\nIf we don't have agreement on how the sub value should be valued, considering that it may have the same value of iss and that's misleading since provider and instance are different entities, I suggest to get sub out by simply removing it from the required attributes ",
              "createdAt": "2023-07-15T10:28:40Z",
              "updatedAt": "2023-07-15T10:29:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bTdL5",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-17T00:29:16Z",
          "updatedAt": "2023-07-17T00:29:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Is the **Wallet Provider** always the **Attester** of the **Wallet Instance**?\r\n\r\nIf that is not the case, it means there are three entities, the Wallet Provider, the Wallet Instance and the Attester. It is theoretically impossible to map the three entities to the two claims, `iss` and `sub`, without conflicts.\r\n\r\nIf the Wallet Provider is NOT always the Attester, the definition of the `iss` claim by eIDAS is problematic and conflicts with the specification of the attestation-based client authentication.",
              "createdAt": "2023-07-17T00:29:16Z",
              "updatedAt": "2023-07-17T00:29:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bTeKe",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-17T00:49:12Z",
          "updatedAt": "2023-07-17T00:49:12Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Hmm, the string `https://wallet.example.com/version/1.0.0` gives me the impression that there are THREE concepts. Namely,\r\n\r\n1. [**per-application identifier**] The traditional client ID assigned to the wallet application. All versions and all per-device instances of the same wallet application use the same client ID.\r\n2. [**per-version identifier**] The version of the wallet application. The string `https://wallet.example.com/version/1.0.0` implies this. The same version of the wallet application may be installed onto multiple devices.\r\n3. [**per-device identifier**] Per-device instance of the wallet application. A key pair generated on the device is only for the per-device instance.\r\n\r\nIf these three concepts are competing for a single claim, `sub`, then reaching an agreement that satisfies everyone would be impossible. It would be necessary to create new claims as needed.",
              "createdAt": "2023-07-17T00:49:12Z",
              "updatedAt": "2023-07-17T00:49:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5byBQu",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-20T18:20:50Z",
          "updatedAt": "2023-07-20T18:20:50Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "According to the underlying draft-looker-oauth-attestation-based-client-auth, the `iss` is the entity the AS (here the wallet) trusts for the purpose of the issuance of attestations and the `sub` is the client id. The wallet can establish the trust be looking the `iss` value up in a trusted list, for example. The actual wallet product could be the `sub` value. The attributes (including capabilities and perhaps even authorization) need to be conveyed through claims in the attestation. \r\nThe difference between attester and wallet provider would be that if the wallet provider is in the iss, it needs to be entitled by the trusted list to issue it's own attestations whereas in the case of the attester, it's the attester who has that entitlement. \r\n\r\nDoes this sound reasonable?",
              "createdAt": "2023-07-20T18:20:50Z",
              "updatedAt": "2023-07-20T18:20:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bzedi",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-20T22:47:45Z",
          "updatedAt": "2023-07-20T22:54:25Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "these information increases the responsability to the issuer that should evaluate mixed variables to an qualitative index\r\n\r\nI'm not in favor of this, since, as already made with ACR values (LoA) in SAML2 and OIDC, a trust framework just have to define the properties within which some attestation levels are achieved\r\n\r\nthat's why we're working with `attested_security_context` \r\n\r\nthe regulation should map key types and user auth types, by quality, inside different level (low, middle, high?)\r\n\r\nvery often the technology changes, with upgrades and deprecation, using a normalized and indexed approach is better than expose issuer to internal evaluation of the security properties that, not at least, then exposes also personal tastes like the user auth type or differently, the key_Type that in some cases are mobile-brand specific -> then discloses the hardware type ",
              "createdAt": "2023-07-20T22:47:45Z",
              "updatedAt": "2023-07-20T22:54:25Z"
            },
            {
              "originalPosition": 27,
              "body": "I'm in favor of having sub as optional and without any constraint about its value\r\n\r\nthe current proposal is concerning to me",
              "createdAt": "2023-07-20T22:50:43Z",
              "updatedAt": "2023-07-20T22:54:25Z"
            },
            {
              "originalPosition": 27,
              "body": "the version is not of interest for an issuer (nor a RP ...) since it should not collect all the changelog/release notes about all the wallet solutions, so that information is useless",
              "createdAt": "2023-07-20T22:52:27Z",
              "updatedAt": "2023-07-20T22:54:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5b2xGt",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-21T12:39:52Z",
          "updatedAt": "2023-07-21T12:39:52Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "in the call yesterday we came to the conclusion that the fundamental question is:\r\n\"Is the Wallet Provider always the Attester of the Wallet Instance?\"\r\n\r\nIndeed, we have already seen the reality that wallet providers may not have the capacity/willingness to run an attestation service on their own. And nobody will force an wallet provider to use a different attestation service. But we should keep this option open. Therefore I am voting to use:\r\n- `iss` as the issuer of the wallet attestation\r\n- `sub` as the client id\r\nThe version should not be referenced in there as this is responsibility of the wallet provider and not a burden to the issuer. If the Wallet Provider runs the attestation service on his own, we have two possibilities:\r\n- a) `iss` equals `sub`\r\n- b) `sub` may be omitted\r\nI'm in favor of a)",
              "createdAt": "2023-07-21T12:39:52Z",
              "updatedAt": "2023-07-21T12:39:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5b2xRD",
          "commit": {
            "abbreviatedOid": "2d10a1b"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-21T12:40:20Z",
          "updatedAt": "2023-07-21T12:40:20Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "please reject the version suggestion, see comment above",
              "createdAt": "2023-07-21T12:40:20Z",
              "updatedAt": "2023-07-21T12:40:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5b2yXX",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-21T12:43:25Z",
          "updatedAt": "2023-07-21T12:43:26Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "as discussed in the call yesterday, as long as we don't have a complete framework on attested security context and the mappings of key type and userauthentication to asc, it makes sense to offer key_type and user_authentication as this is a mechanism that is already working today and has been implemented.\r\nOnce we have a complete trust framework with asc mappings, we can add them to the client attestations\r\n\r\nTherefore, I'm voting to keep them in for now and offer both possiblities",
              "createdAt": "2023-07-21T12:43:25Z",
              "updatedAt": "2023-07-21T12:43:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5geYYi",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-09-09T06:55:21Z",
          "updatedAt": "2023-09-09T07:01:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\nWallet attestations MUST be provided following [@!I-D.looker-oauth-attestation-based-client-auth].\n```\n",
              "createdAt": "2023-09-09T06:55:21Z",
              "updatedAt": "2023-09-09T07:01:14Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIn addition to the claims defined in in [@!I-D.looker-oauth-attestation-based-client-auth], the Wallet Attestation SHOULD contain the following claims defined by this profile:\r\n```\r\nmade optional following the conversation below.",
              "createdAt": "2023-09-09T06:57:05Z",
              "updatedAt": "2023-09-11T10:01:47Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n* `key_type`: JSON array of strings that expresses the security mechanism the wallet can use to manage private keys based on the capabilities of the execution environment of the wallet. This specification defines the following values for `key_type`: \r\n  * `software`: It MUST be used when the wallet uses software-based key management. It MUST NOT be used with `TEE`, `Strongbox`, `Secure Element`, `Secure Element`, and `External-HSM`.\r\n  * `hardware`: It MUST be used when the wallet uses software-based key management. It MUST NOT be used with `software`. \r\n  * `tee`: It SHOULD be used when the wallet uses the Trusted Execution Environment ([TEE](https://globalplatform.org/specs-library/?filter-committee=tee)) for key management. It SHOULD be used in conjunction with `hardware`. It MUST NOT be used with `software` and `secure_element`.\r\n  * `secure_element`: It SHOULD be used when the Wallet uses the Trusted Execution Environment ([TEE](https://globalplatform.org/specs-library/?filter-committee=se)) for key management. It SHOULD be used in conjunction with `hardware`. It MUST NOT be used with `software` and `tee`.\r\n  * `hsm`: It SHOULD be used when the wallet uses Hardware Security Module (HSM).\r\n```\r\nshould be clear if a string or array of strings. chose array of strings for the case when [\"hardware\", \"secure_element\"].",
              "createdAt": "2023-09-09T06:59:00Z",
              "updatedAt": "2023-09-11T09:56:34Z"
            },
            {
              "originalPosition": 9,
              "body": "Each of the terms defined by this spec need to be expanded upon and given a clear definition following https://fidoalliance.org/specs/common-specs/fido-registry-v2.2-rd-20210525.html#key-protection-types.\r\n\r\nstrongbox and secure enclave are just particular implementations of TEE (confirmed with john bradley)",
              "createdAt": "2023-09-09T06:59:41Z",
              "updatedAt": "2023-09-11T11:47:37Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n* `user_authentication`: JSON string of a claim that asserts the security mechanism the wallet can use to authenticate access to private keys.\r\n```\r\n\r\nIs it a string or array of strings??",
              "createdAt": "2023-09-09T07:01:01Z",
              "updatedAt": "2023-09-11T10:04:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5giVAz",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T10:01:26Z",
          "updatedAt": "2023-09-11T10:01:26Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "In general I agree with Giuseppe on the direction, but what Paul is saying that we are lacking those \"normalized values\" is also true.. so if we foresee that concrete `key_type` and `user_authentication` will be replaced by \"normalized approach\", I think at least we should not mandate key_type and user_authentication?",
              "createdAt": "2023-09-11T10:01:26Z",
              "updatedAt": "2023-09-11T10:01:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5giWdU",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T10:04:51Z",
          "updatedAt": "2023-09-11T10:04:51Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I honestly do not know what any of the following values for `user_authentication` mean: `System-Biometry`, `System-PIN`, `Internal-Biometry`, `Internal-PIN`, and `SecureElement-PIN`.\" suggest we open an issue for now.",
              "createdAt": "2023-09-11T10:04:51Z",
              "updatedAt": "2023-09-11T10:04:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5giYml",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T10:08:36Z",
          "updatedAt": "2023-09-11T10:08:37Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "once this PR goes in (https://github.com/openid/OpenID4VCI/pull/64/files), we should probably add `insufficient_wallet_security` or something as an error code? for now, let's open an issue on this.",
              "createdAt": "2023-09-11T10:08:37Z",
              "updatedAt": "2023-09-11T10:08:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5giimS",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T10:33:45Z",
          "updatedAt": "2023-09-11T10:38:26Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "@peppelinux making the `sub` optional cannot be done in HAIP and needs to be discussed in the IETF on the client attestation draft. For HAIP, I suggest we remove the concrete values and put in letter what the values are expected to be: code suggestion below.",
              "createdAt": "2023-09-11T10:33:45Z",
              "updatedAt": "2023-09-11T10:38:26Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  \"iss\": \"<identifier of the issuer of this wallet attestation>\",\r\n  \"sub\": \"<`client_id` of the OAuth client>\",\r\n```\r\n@peppelinux ",
              "createdAt": "2023-09-11T10:38:19Z",
              "updatedAt": "2023-09-11T10:38:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gjRV1",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T12:20:04Z",
          "updatedAt": "2023-09-11T12:20:04Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "JohnB suggested `external-multifactor`",
              "createdAt": "2023-09-11T12:20:04Z",
              "updatedAt": "2023-09-11T12:20:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gjyMw",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:25:23Z",
          "updatedAt": "2023-09-11T13:25:24Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I would be better to set it as SHOULD, since it is not normative HOW the attestation could be provisioned and obtained. The MUST should be considered for the verification of the attestation, not to the way it was provisioned\r\n\r\nI say this because there are several ways to provision a signed JWT and I would keep the door open with a good guidance (SHOULD) without forcing the usage of a particular specification",
              "createdAt": "2023-09-11T13:25:23Z",
              "updatedAt": "2023-09-11T13:25:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gjzjv",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:27:32Z",
          "updatedAt": "2023-09-11T13:27:33Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think that you found the best editorial compromise for this annoying issue of the sub",
              "createdAt": "2023-09-11T13:27:32Z",
              "updatedAt": "2023-09-11T13:27:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gkix6",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T14:46:30Z",
          "updatedAt": "2023-09-11T14:46:30Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I would also like to add to this discussion that we agreed that the claim client_id represents the unique client identifier, even if there are divisions about who is the real client: the wallet solution or the wallet instance. I'm in favour of the latter, by having the distinction between `iss` and `sub` when the wallet instance is installed on a personal mobile device and all the respective crytpographic keys are stored by each material owner (wallet provider has its own, then the wallet instance has its own).\r\n\r\nHowever, \"client_id\" is not always used to specify a client identifier since there are many way in OAuth2 to uniquely identify a client within a flow, below I mention for instance methods like:\r\n\r\n- client_secret_basic\r\n- client_secret_jwt\r\n- private_key_jwt\r\n\r\neven if these are not relevant for the wallet solution, I'd try to not mandate too many details within the specs at this current phase, by giving more flexibility in the material implementations on the way. \r\n\r\n",
              "createdAt": "2023-09-11T14:46:30Z",
              "updatedAt": "2023-09-11T14:46:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g9vMZ",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T12:42:11Z",
          "updatedAt": "2023-09-14T12:42:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Now I-D.ietf-oauth-attestation-based-client-auth",
              "createdAt": "2023-09-14T12:42:11Z",
              "updatedAt": "2023-09-14T12:42:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g9vm_",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T12:43:04Z",
          "updatedAt": "2023-09-14T12:43:04Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I wouldn't include spaces in the values.  They can cause quirky problems, in practice.",
              "createdAt": "2023-09-14T12:43:04Z",
              "updatedAt": "2023-09-14T12:43:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g_O92",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T15:30:00Z",
          "updatedAt": "2023-09-14T15:30:00Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I would propose to use snake_case for the key values, then\r\n\r\n- software\r\n- tee\r\n- strongbox\r\n- secure_enclave\r\n- secure_element\r\n- external_hsm",
              "createdAt": "2023-09-14T15:30:00Z",
              "updatedAt": "2023-09-14T15:30:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hOiLL",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T14:24:56Z",
          "updatedAt": "2023-09-18T14:24:57Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I rewrote the paragraph and changed it to SHOULD as with the new revision we have options on different abstraction levels to convey information about the security of the wallet and the key. ",
              "createdAt": "2023-09-18T14:24:57Z",
              "updatedAt": "2023-09-18T14:24:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hQE0S",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:11:06Z",
          "updatedAt": "2023-09-18T17:11:07Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I agree with the proposal to create bullets for every type value. I stripped the definitions as we now do only have a single value. I changed the definition of SE to refer to Secure Elements. Secure Enclaves and Secure Elements might be a certain kind of trusted execution environment, but they have distinct properties differentiating them from TEEs in general. As far as I understand, a security module qualifies as TEE already if the process is isolated from the user processes. Secure Element have hardware isolation. I added Secure Enclave and Strongbox. \r\n@paulbastian please chime in\r\nNote: the references to globalplatform.com do not resolve in a definition but a list of documents and those cannot be downloaded free of charge. So I opt in favor of other definitions. ",
              "createdAt": "2023-09-18T17:11:06Z",
              "updatedAt": "2023-09-18T17:13:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hQGrM",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:15:52Z",
          "updatedAt": "2023-09-18T17:15:52Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "incorporated Kristina's suggestion",
              "createdAt": "2023-09-18T17:15:52Z",
              "updatedAt": "2023-09-18T17:15:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hQHNZ",
          "commit": {
            "abbreviatedOid": "72ed205"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:17:20Z",
          "updatedAt": "2023-09-18T17:17:20Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "modified",
              "createdAt": "2023-09-18T17:17:20Z",
              "updatedAt": "2023-09-18T17:17:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hW44Q",
          "commit": {
            "abbreviatedOid": "c0a7c6a"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-09-19T14:07:35Z",
          "updatedAt": "2023-09-19T14:07:44Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  * `hardware`: It MUST be used when the wallet uses hardware-based key management.\r\n```",
              "createdAt": "2023-09-19T14:07:36Z",
              "updatedAt": "2023-09-19T14:07:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hW53W",
          "commit": {
            "abbreviatedOid": "c0a7c6a"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-09-19T14:09:17Z",
          "updatedAt": "2023-09-19T14:20:00Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n   * The Wallet Attestation JWT scheme is defined in (#wallet-attestation-schema).\r\n```",
              "createdAt": "2023-09-19T14:09:18Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n* `key_type`: OPTIONAL. JSON String that asserts the security mechanism the Wallet uses to manage the private key associated with the public key given in the `cnf` claim. This mechanism is based on the capabilities of the execution environent of the Wallet, this might be a secure element (in case of a wallet residing on a smartphone) or a Cloud-HSM (in case of a cloud Wallet). This specification defines the following values for `key_type`:\r\n```",
              "createdAt": "2023-09-19T14:09:34Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n  * `software`: It MUST be used when the Wallet uses software-based key management.\r\n```",
              "createdAt": "2023-09-19T14:09:41Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  * `hardware`: It MUST be used when the Wallet uses software-based key management.\r\n```",
              "createdAt": "2023-09-19T14:09:47Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n  * `tee`: It SHOULD be used when the Wallet uses the Trusted Execution Environment for key management.\r\n```",
              "createdAt": "2023-09-19T14:09:55Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 33,
              "body": "definition about Secure Enclave, Strongbox and TEE are required if any external reference is given to the reader\r\n\r\nwhat they are or where they are defined is an editorial requirement",
              "createdAt": "2023-09-19T14:11:39Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n  * `hsm`: It SHOULD be used when the Wallet uses Hardware Security Module (HSM).\r\n```",
              "createdAt": "2023-09-19T14:11:53Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n* `user_authentication`: OPTIONAL. JSON String that asserts the security mechanism the Wallet uses to authenticate access to the private key associated with the public key given in the `cnf` claim. This specification defines the following values for `user_authentication`: `system_biometry`, `system_pin`, `internal_biometry`, `internal_pin`, and `secureelement_pin`.\r\n```\r\n\r\nto be then snake cased",
              "createdAt": "2023-09-19T14:13:22Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n* `aal`: OPTIONAL. JSON String asserting the authentication level of the Wallet and the key as asserted in the `cnf` claim.\r\n```",
              "createdAt": "2023-09-19T14:13:44Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nThis is an example of a Wallet Instance Attestation:\r\n```",
              "createdAt": "2023-09-19T14:18:56Z",
              "updatedAt": "2023-09-19T14:20:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hXGjG",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-19T14:27:41Z",
          "updatedAt": "2023-09-19T14:27:41Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "in the implementation I'm working on the `sub` value is the thumbprint of the cnf.jwk since this latter uniquely identify, anyway, the wallet instance\r\n",
              "createdAt": "2023-09-19T14:27:41Z",
              "updatedAt": "2023-09-19T14:27:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h-Qwa",
          "commit": {
            "abbreviatedOid": "74b182a"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T08:48:05Z",
          "updatedAt": "2023-09-26T08:48:05Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/62\r\n",
              "createdAt": "2023-09-26T08:48:05Z",
              "updatedAt": "2023-09-26T08:48:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h-SN9",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-26T08:50:48Z",
          "updatedAt": "2023-09-26T08:50:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5iDMno",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T19:03:58Z",
          "updatedAt": "2023-09-26T19:03:58Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n* `user_authentication`: OPTIONAL. JSON String that asserts the security mechanism the Wallet uses to authenticate access to the private key associated with the public key given in the `cnf` claim. This specification plans to define the following values for `user_authentication`: `system_biometry`, `system_pin`, `internal_biometry`, `internal_pin`, and `secureelement_pin`.\r\n```\r\nwe need to define each of these values like for `key_type`. can be another PR, but would like to be clear we will keep working on it.",
              "createdAt": "2023-09-26T19:03:58Z",
              "updatedAt": "2023-09-26T19:03:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iDMx-",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "happy to approve once my one suggestion is incorporated",
          "createdAt": "2023-09-26T19:04:26Z",
          "updatedAt": "2023-09-26T19:04:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5iT6xk",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T17:32:12Z",
          "updatedAt": "2023-09-28T17:32:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "@paulbastian can you please provide definitions of the user authentication values?\r\n@Sakurann I think we either don't define the claim at all or we fully define it. ",
              "createdAt": "2023-09-28T17:32:12Z",
              "updatedAt": "2023-09-28T17:32:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iyLkC",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T11:39:18Z",
          "updatedAt": "2023-10-04T11:41:02Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n* `user_authentication`: OPTIONAL. JSON String that asserts the security mechanism the Wallet uses to authenticate access to the private key associated with the public key given in the `cnf` claim. This specification defines the following values for `user_authentication`:\r\n  * `system_biometry`: It MUST be used when the key usage is authorized through a biometric factor by the operating system.\r\n  * `system_pin`: It MUST be used when the key usage is authorized through a knowledge factor by the operating system.\r\n  * `internal_biometry`: It MUST be used when the key usage is authorized through a biometric factor by the Wallet itself.\r\n  * `internal_pin`: It MUST be used when the key usage is authorized through a knowledge factor by the Wallet itself.\r\n  * `secure_element_pin` It MUST be used when the key usage is authorized through a knowledge factor by the secure element that is managing the key itself.\r\n```",
              "createdAt": "2023-10-04T11:39:19Z",
              "updatedAt": "2023-10-04T11:41:02Z"
            },
            {
              "originalPosition": 39,
              "body": "We may use JSON Array for `user_authentication`?",
              "createdAt": "2023-10-04T11:40:46Z",
              "updatedAt": "2023-10-04T11:41:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i0sSN",
          "commit": {
            "abbreviatedOid": "d9e263c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T15:55:43Z",
          "updatedAt": "2023-10-04T15:55:43Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "@Sakurann Paul updated the PR with definitions. Please check. ",
              "createdAt": "2023-10-04T15:55:43Z",
              "updatedAt": "2023-10-04T15:55:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i2jDl",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T20:51:08Z",
          "updatedAt": "2023-10-04T20:51:09Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n* `user_authentication`: OPTIONAL. JSON String that asserts the security mechanism the Wallet uses to authenticate the user to authorize access to the private key associated with the public key given in the `cnf` claim. This specification defines the following values for `user_authentication`:\r\n  * `system_biometry`: It MUST be used when the key usage is authorized by the mobile operating system using a biometric factor.\r\n  * `system_pin`: It MUST be used when the key usage is authorized by the mobile operating system using personal identification number (PIN).\r\n  * `internal_biometry`: It MUST be used when the key usage is authorized by the Wallet using a biometric factor.\r\n  * `internal_pin`: It MUST be used when the key usage is authorized by the Wallet using PIN.\r\n  * `secure_element_pin` It MUST be used when the key usage is authorized by the secure element managing the key itself using PIN.\r\n```\r\n\r\n`knowledge factor` != `pin`, no? knowledge factor can be password, etc...\r\nI have reservations by saying `by the Wallet`, given that the term `Wallet` is not defined in HAIP yet (opened #64), prefer something like `at the application layer`, but guess it's ok for now.",
              "createdAt": "2023-10-04T20:51:09Z",
              "updatedAt": "2023-10-05T18:48:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i25tX",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T22:02:06Z",
          "updatedAt": "2023-10-04T22:02:06Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "I used knowledge factor because for in case of operating system, Android can not distinguish between password, pin and swipe pattern. Secure element will always have a pin and usually the wallet option as well",
              "createdAt": "2023-10-04T22:02:06Z",
              "updatedAt": "2023-10-04T22:02:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i28nj",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T22:07:05Z",
          "updatedAt": "2023-10-04T22:07:05Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "what does that mean in terms of the current/proposed spec text?",
              "createdAt": "2023-10-04T22:07:05Z",
              "updatedAt": "2023-10-04T22:07:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-SRH",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T18:43:34Z",
          "updatedAt": "2023-10-05T18:43:34Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "> I have reservations by saying by the Wallet\r\n\r\nThe section is about wallet attestation, so I think it is reasonable to use the term \"Wallet\" ",
              "createdAt": "2023-10-05T18:43:34Z",
              "updatedAt": "2023-10-05T18:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-S8B",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T18:45:28Z",
          "updatedAt": "2023-10-05T18:45:29Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "@Sakurann @paulbastian I suggest to just remove \"as a knowledge factor\" as I think PIN is sufficient. ",
              "createdAt": "2023-10-05T18:45:29Z",
              "updatedAt": "2023-10-05T18:45:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-UF_",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T18:48:44Z",
          "updatedAt": "2023-10-05T18:48:44Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "> I suggest to just remove \"as a knowledge factor\" as I think PIN is sufficient.\r\n\r\nI edited the suggestion above - please apply it if you are ok with it",
              "createdAt": "2023-10-05T18:48:44Z",
              "updatedAt": "2023-10-05T18:48:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-USZ",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T18:49:16Z",
          "updatedAt": "2023-10-05T18:49:17Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "> @Sakurann @paulbastian I suggest to just remove \"as a knowledge factor\" as I think PIN is sufficient.\r\n\r\nsure, but the wallet needs to be defined - ideally in this PR, but for now I opened a separate issue #64 ",
              "createdAt": "2023-10-05T18:49:17Z",
              "updatedAt": "2023-10-05T18:49:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-Uy3",
          "commit": {
            "abbreviatedOid": "1ae5b33"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T18:50:47Z",
          "updatedAt": "2023-10-05T18:50:47Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "looks fine to me",
              "createdAt": "2023-10-05T18:50:47Z",
              "updatedAt": "2023-10-05T18:50:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i-aEp",
          "commit": {
            "abbreviatedOid": "4f88057"
          },
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T19:03:56Z",
          "updatedAt": "2023-10-05T19:03:56Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "shouldn't these values be lower cased to match the definitions above? \r\n \r\n",
              "createdAt": "2023-10-05T19:03:56Z",
              "updatedAt": "2023-10-05T19:03:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOJcWsFs5U5S79",
      "title": "added requirement to support web-based key resolution for verifier at\u2026",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/53",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[preview](https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/verifier-attestion-keys/draft-oid4vc-haip-sd-jwt-vc.html)",
      "createdAt": "2023-07-07T09:15:36Z",
      "updatedAt": "2023-09-28T17:40:07Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "218029acf83d211d5262d14df554c85f14af7d71",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "verifier-attestion-keys",
      "headRefOid": "57dfe3d796906f4926301ecedaad757d45216cae",
      "closedAt": "2023-09-28T17:40:07Z",
      "mergedAt": "2023-09-28T17:40:07Z",
      "mergedBy": "tlodderstedt",
      "mergeCommit": {
        "oid": "29d00a4a2bcf184f421fe0a9e3fbe794d0bd0422"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5ao4qs",
          "commit": {
            "abbreviatedOid": "99f9519"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-08T07:39:57Z",
          "updatedAt": "2023-07-08T07:40:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\n   * To obtain the issuer's Public key for verification, verifier attestions MUST support web-based key resolution as defined in Section 5 of [@!I-D.terbu-sd-jwt-vc]. The JOSE header `kid` MUST be used to identify the respective key.\n```\nIt should be clearer web-based key resolution for which key",
              "createdAt": "2023-07-08T07:39:57Z",
              "updatedAt": "2023-07-08T07:40:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gev9M",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-09T17:10:38Z",
          "updatedAt": "2023-09-09T17:10:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5gev_C",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "V\u00e9rifier attestation does not make much sense in this context..?",
          "createdAt": "2023-09-09T17:11:59Z",
          "updatedAt": "2023-09-09T17:12:24Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\n   * To obtain the issuer's public key for verification, verifiers MUST support web-based key resolution as defined in Section 5 of [@!I-D.terbu-sd-jwt-vc]. The JOSE header `kid` MUST be used to identify the respective key.\n```\n",
              "createdAt": "2023-09-09T17:11:59Z",
              "updatedAt": "2023-09-09T17:12:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-E0g",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T13:24:33Z",
          "updatedAt": "2023-09-14T13:24:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I agree with this suggested change.",
              "createdAt": "2023-09-14T13:24:33Z",
              "updatedAt": "2023-09-14T13:24:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-FtP",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T13:26:12Z",
          "updatedAt": "2023-09-14T13:26:13Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Now I-D.ietf-oauth-sd-jwt-vc",
              "createdAt": "2023-09-14T13:26:12Z",
              "updatedAt": "2023-09-14T13:26:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-F5A",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-14T13:26:33Z",
          "updatedAt": "2023-09-14T13:26:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5iT75e",
          "commit": {
            "abbreviatedOid": "a74ee1b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T17:35:05Z",
          "updatedAt": "2023-09-28T17:35:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "changed it ",
              "createdAt": "2023-09-28T17:35:05Z",
              "updatedAt": "2023-09-28T17:35:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iT9eH",
          "commit": {
            "abbreviatedOid": "f39c380"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T17:39:01Z",
          "updatedAt": "2023-09-28T17:39:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n   * To obtain the issuer's public key for verification, verifiers MUST support web-based key resolution as defined in Section 5 of [@!I-D.ietf-oauth-sd-jwt-vc]. The JOSE header `kid` MUST be used to identify the respective key.\r\n```",
              "createdAt": "2023-09-28T17:39:01Z",
              "updatedAt": "2023-09-28T17:39:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iT9oF",
          "commit": {
            "abbreviatedOid": "57dfe3d"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-28T17:39:26Z",
          "updatedAt": "2023-09-28T17:39:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOJcWsFs5U-U7O",
      "title": "remove reference to a merged VCI PR 520",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/54",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #30\r\n\r\nnot sure about the sentence on how to obtain scopes, but felt like something had to be said about it",
      "createdAt": "2023-07-08T00:49:50Z",
      "updatedAt": "2023-09-26T04:21:00Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "218029acf83d211d5262d14df554c85f14af7d71",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "Sakurann-using-scopes",
      "headRefOid": "f33c13e13c065068b5101b4b5adbdeb351cbee04",
      "closedAt": "2023-09-26T04:21:00Z",
      "mergedAt": "2023-09-26T04:20:59Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "3bd9f838e2675301a2ffc51eec35d5d66fd7999f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5a0yGh",
          "commit": {
            "abbreviatedOid": "f33c13e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-11T08:54:12Z",
          "updatedAt": "2023-07-11T08:54:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "How would you envision the process based on metadata? I assume the wallet would need to search for a certain credential type and determine the issuer specific scope value? ",
              "createdAt": "2023-07-11T08:54:12Z",
              "updatedAt": "2023-07-11T08:54:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bdiLM",
          "commit": {
            "abbreviatedOid": "f33c13e"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:17:13Z",
          "updatedAt": "2023-07-18T08:17:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "yes",
              "createdAt": "2023-07-18T08:17:13Z",
              "updatedAt": "2023-07-18T08:17:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-G_X",
          "commit": {
            "abbreviatedOid": "f33c13e"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T13:28:29Z",
          "updatedAt": "2023-09-14T13:28:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Note that PR #61 also removes this merged PR number.",
              "createdAt": "2023-09-14T13:28:29Z",
              "updatedAt": "2023-09-14T13:28:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-HOQ",
          "commit": {
            "abbreviatedOid": "f33c13e"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-14T13:28:54Z",
          "updatedAt": "2023-09-14T13:28:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5hQQQN",
          "commit": {
            "abbreviatedOid": "f33c13e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-18T17:39:51Z",
          "updatedAt": "2023-09-18T17:39:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOJcWsFs5VDoHS",
      "title": "changed reference to client attestation draft",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/55",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T07:58:55Z",
      "updatedAt": "2023-07-18T08:20:17Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "218029acf83d211d5262d14df554c85f14af7d71",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "update-clt-attestion-ref",
      "headRefOid": "d8be09f9d417a37c6d266a4ec8a10ca6839937f2",
      "closedAt": "2023-07-18T08:20:16Z",
      "mergedAt": "2023-07-18T08:20:16Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "46d2332b3d86e9125c876e84adea0836952ccb15"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5avIj8",
          "commit": {
            "abbreviatedOid": "d8be09f"
          },
          "author": "c2bo",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T15:02:47Z",
          "updatedAt": "2023-07-10T15:02:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5bdjcZ",
          "commit": {
            "abbreviatedOid": "d8be09f"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-18T08:20:05Z",
          "updatedAt": "2023-07-18T08:20:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOJcWsFs5VVH76",
      "title": "sd-jwt vc profile for oid4vc",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/56",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-12T16:17:47Z",
      "updatedAt": "2023-10-05T18:45:50Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "29d00a4a2bcf184f421fe0a9e3fbe794d0bd0422",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "sd-jwt-profile",
      "headRefOid": "cfe473aa1065c4438635c88970ed1f1ad7d268f8",
      "closedAt": "2023-10-05T18:45:50Z",
      "mergedAt": "2023-10-05T18:45:50Z",
      "mergedBy": "tlodderstedt",
      "mergeCommit": {
        "oid": "31d589cc6f7d36073c3c9ed19d62ef5b3f49f41a"
      },
      "comments": [
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "### \"claims\" or \"credentialSubject\"\r\n\r\nEither of the following changes should be made for consistency.\r\n\r\n1. Change the `claims` parameter in Credential Issuer Metadata to `credentialSubject`.\r\n2. Change the `credentialSubject` parameter in Authorization Details and Credential Request to `claims`.\r\n\r\n### Additional Claims Specified by Credential Request\r\n\r\n> * `credentialSubject`: OPTIONAL. A JSON object as defined in (#authorization_vc_sd-jwt). This object determines the optional claims to be added to the credential to be issued.\r\n\r\nIf this were a functionality to allow wallets to request **more** claims than the set of claims implied by the `type`, it would mean that wallets can obtain more claims than ones authorized by the user. It should not happen.\r\n\r\nBecause a credential offer contains neither `claims` nor `credentialSubject` (which implies that a fixed set of claims is determined based on `type`), the purpose of the `credentialSubject` in a credential request should be only to **narrow down** the set of claims.\r\n\r\nSo, either of the following changes should be made.\r\n\r\n1. Rephrase the description about the `credentialSubject` in Credential Request.\r\n2. Remove the `credentialSubject` parameter from Credential Request.\r\n\r\n### Description of Credential Response\r\n\r\n> The value of the `credential` claim in the Credential Response MUST be a SD-JWT VC. Credentials of this format are already a sequence of base64url-encoded values separated by period characters and MUST NOT be re-encoded.\r\n\r\nTo be exact, the SD-JWT format contains `~` in addition to base64url characters and periods. Trying to repeat to describe technical details that are written in other specifications could cause this kind of mistakes. The description here does not have to mention details about the SD-JWT format. It would be enough to say, for example, like below.\r\n\r\n> Credentials of this format are already suitable for transfer and, therefore, they need not and MUST NOT be re-encoded.\r\n\r\nFinally, a typo: \"a SD-JWT VC\" -> \"**an** SD-JWT VC\"",
          "createdAt": "2023-07-14T02:53:18Z",
          "updatedAt": "2023-07-14T02:53:18Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "body": "There are some considerations made by service designers and accessibility domain experts that I would like to share to you.\r\n\r\nthese are not relevant for the scopes of this PR, so this proposal should be converted in a issue if you agree.\r\n\r\nThere are cases where a credential issuer would offer periodic updates about its issued credentials, cases where the issuer should communicate the recent news related to the use of the credential to the end user and owner of that credential\r\n\r\nthis could be implemented as web uri, the wallet instance periodically gets updates by hitting this refs.\r\nThe content type could be application/json if html could not be handly",
          "createdAt": "2023-07-14T13:37:56Z",
          "updatedAt": "2023-07-14T13:37:56Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> ### \"claims\" or \"credentialSubject\"\r\n> Either of the following changes should be made for consistency.\r\n> \r\n> 1. Change the `claims` parameter in Credential Issuer Metadata to `credentialSubject`.\r\n> 2. Change the `credentialSubject` parameter in Authorization Details and Credential Request to `claims`.\r\n\r\nchanged it to `claims` - `credentialSubject` is not used by SD-JWT VCs. \r\n\r\n> \r\n> ### Additional Claims Specified by Credential Request\r\n> > * `credentialSubject`: OPTIONAL. A JSON object as defined in (#authorization_vc_sd-jwt). This object determines the optional claims to be added to the credential to be issued.\r\n> \r\n> If this were a functionality to allow wallets to request **more** claims than the set of claims implied by the `type`, it would mean that wallets can obtain more claims than ones authorized by the user. It should not happen.\r\n\r\nThe set of claims MUST be a sub set of the authorized claims. \r\n> \r\n> Because a credential offer contains neither `claims` nor `credentialSubject` (which implies that a fixed set of claims is determined based on `type`), the purpose of the `credentialSubject` in a credential request should be only to **narrow down** the set of claims.\r\n\r\nI agree. The question is whether it would make sense to add `claims` to the credential offer so the issuer could tell the wallet what optional claims are available. WDYT?\r\n\r\n> \r\n> So, either of the following changes should be made.\r\n> \r\n> 1. Rephrase the description about the `credentialSubject` in Credential Request.\r\n> 2. Remove the `credentialSubject` parameter from Credential Request.\r\n> \r\n> ### Description of Credential Response\r\n> > The value of the `credential` claim in the Credential Response MUST be a SD-JWT VC. Credentials of this format are already a sequence of base64url-encoded values separated by period characters and MUST NOT be re-encoded.\r\n> \r\n> To be exact, the SD-JWT format contains `~` in addition to base64url characters and periods. Trying to repeat to describe technical details that are written in other specifications could cause this kind of mistakes. The description here does not have to mention details about the SD-JWT format. It would be enough to say, for example, like below.\r\n> \r\n> > Credentials of this format are already suitable for transfer and, therefore, they need not and MUST NOT be re-encoded.\r\n> \r\n\r\nI incorporated the text you proposed. \r\n\r\n> Finally, a typo: \"a SD-JWT VC\" -> \"**an** SD-JWT VC\"\r\n\r\nfixed\r\n\r\n",
          "createdAt": "2023-07-14T13:50:56Z",
          "updatedAt": "2023-07-14T13:50:56Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> There are some considerations made by service designers and accessibility domain experts that I would like to share to you.\r\n> \r\n> these are not relevant for the scopes of this PR, so this proposal should be converted in a issue if you agree.\r\n> \r\n> There are cases where a credential issuer would offer periodic updates about its issued credentials, cases where the issuer should communicate the recent news related to the use of the credential to the end user and owner of that credential\r\n> \r\n> this could be implemented as web uri, the wallet instance periodically gets updates by hitting this refs. The content type could be application/json if html could not be handly\r\n\r\nas you already noted, this topic is out of scope of this PR. please file an issue on that topic ",
          "createdAt": "2023-07-30T15:30:37Z",
          "updatedAt": "2023-07-30T15:30:37Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also why is this approach better than adding new parameters in each of the sub sections in section 4 that already defines extensions for OpenID4VCI? With the current structure, the implementer needs to look into two places to see parameters for the Credential Offer for example. If the entire profile is about SD-JWT VC, it should be in one place, no..?",
          "createdAt": "2023-08-01T03:43:32Z",
          "updatedAt": "2023-08-01T03:43:32Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Need to add identifier for presentation request.",
          "createdAt": "2023-08-29T19:51:13Z",
          "updatedAt": "2023-08-29T19:51:13Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Also why is this approach better than adding new parameters in each of the sub sections in section 4 that already defines extensions for OpenID4VCI? With the current structure, the implementer needs to look into two places to see parameters for the Credential Offer for example. If the entire profile is about SD-JWT VC, it should be in one place, no..?\r\n\r\nI would like to keep the profiling of the protocol and the profile of the credential format separated. However, if it turns out to be to complex we might change that. ",
          "createdAt": "2023-09-18T13:00:17Z",
          "updatedAt": "2023-09-18T13:00:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5bNscT",
          "commit": {
            "abbreviatedOid": "6395526"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-14T13:31:33Z",
          "updatedAt": "2023-07-14T13:32:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "we should mandate the SVG file format for the logo, since it grants a high quality rendering in any kind of display resolution ",
              "createdAt": "2023-07-14T13:31:33Z",
              "updatedAt": "2023-07-14T13:32:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bdj4b",
          "commit": {
            "abbreviatedOid": "6395526"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:21:04Z",
          "updatedAt": "2023-07-18T08:21:05Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "can you please open a separate issue on that so that we can discuss it there? thanks",
              "createdAt": "2023-07-18T08:21:04Z",
              "updatedAt": "2023-07-18T08:21:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bdmnw",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:26:45Z",
          "updatedAt": "2023-07-18T08:26:46Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nThis section specifies how SD-JWT VCs as defined in [@!I-D.terbu-sd-jwt-vc] are used in conjunction with OpenID4VCs.\r\n\r\n```",
              "createdAt": "2023-07-18T08:26:45Z",
              "updatedAt": "2023-07-18T08:27:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5bdoH9",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T08:30:01Z",
          "updatedAt": "2023-07-18T08:30:02Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "we need an official reference to draft-terbu.\r\nalso is a new abbreviation \"OpenID 4 VCs\"?",
              "createdAt": "2023-07-18T08:30:01Z",
              "updatedAt": "2023-07-18T08:30:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5beQa2",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T09:50:23Z",
          "updatedAt": "2023-07-18T09:50:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "not sure what `type of a certain credential type` is supposed to mean...\r\n\r\n```suggestion\r\n* `type`: REQUIRED. JSON string designating the type of a credential as defined in [@!I-D.terbu-sd-jwt-vc], Section 4.2.2.1.\r\n```",
              "createdAt": "2023-07-18T09:50:23Z",
              "updatedAt": "2023-07-18T09:50:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5by0wN",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-20T20:38:54Z",
          "updatedAt": "2023-07-20T20:38:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "unfortunately I-D.terbu-sd-jwt-vc doesn't support OIDC Federation, that's a webpki with trust chains and a solid alternative to X.509",
              "createdAt": "2023-07-20T20:38:54Z",
              "updatedAt": "2023-07-20T20:38:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmvr1",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-30T15:28:13Z",
          "updatedAt": "2023-07-30T15:28:13Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "nothing in the sd-jwt vc draft precludes use of OIDC Federation, in the same way as it does not preclude x.509\r\nHAIP mandates jwt issuer and x.509, adding another (mandatory to implement) option seems a complexity driver, but let's talk. Please open an issue about it as this PR is about a different topic. ",
              "createdAt": "2023-07-30T15:28:13Z",
              "updatedAt": "2023-07-30T15:28:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmv_d",
          "commit": {
            "abbreviatedOid": "6395526"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-30T15:38:30Z",
          "updatedAt": "2023-07-30T15:38:30Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Here https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/58",
              "createdAt": "2023-07-30T15:38:30Z",
              "updatedAt": "2023-07-30T15:38:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmwCu",
          "commit": {
            "abbreviatedOid": "70de11b"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-30T15:40:42Z",
          "updatedAt": "2023-07-30T15:40:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Done here https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/59",
              "createdAt": "2023-07-30T15:40:42Z",
              "updatedAt": "2023-07-30T15:40:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmwEs",
          "commit": {
            "abbreviatedOid": "2535697"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-07-30T15:41:50Z",
          "updatedAt": "2023-07-30T15:42:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nThis profile supports two ways to represent and resolve the key required to validate the issuer signature of an SD-JWT VC, the web PKI-based key resolution and the x.509 certificates.\r\n```",
              "createdAt": "2023-07-30T15:41:50Z",
              "updatedAt": "2023-07-30T15:42:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmwka",
          "commit": {
            "abbreviatedOid": "574a3bf"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-30T15:59:41Z",
          "updatedAt": "2023-07-30T15:59:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "thanks",
              "createdAt": "2023-07-30T15:59:41Z",
              "updatedAt": "2023-07-30T15:59:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmwoW",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-30T16:01:52Z",
          "updatedAt": "2023-07-30T16:01:52Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "thanks",
              "createdAt": "2023-07-30T16:01:52Z",
              "updatedAt": "2023-07-30T16:01:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cmxBZ",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-30T16:17:32Z",
          "updatedAt": "2023-07-30T16:17:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5cv1eH",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-01T01:43:58Z",
          "updatedAt": "2023-08-01T01:44:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\nThe following additional Credential Issuer metadata are defined for this Credential format to be used in addition to those defined in Section 10.2 of [@!OpenID4VCI].\n```\n\nFrom my experience it hasn't been clear that these are used in addition to..",
              "createdAt": "2023-08-01T01:43:58Z",
              "updatedAt": "2023-08-01T01:44:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5cwFib",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think a parameter in issuer metadata is missing..?",
          "createdAt": "2023-08-01T03:28:16Z",
          "updatedAt": "2023-08-01T03:39:02Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\nThis section specifies how SD-JWT VCs as defined in [@!I-D.terbu-sd-jwt-vc] are used in conjunction with OpenID4VC specifications.\n```\n",
              "createdAt": "2023-08-01T03:28:16Z",
              "updatedAt": "2023-08-01T03:39:02Z"
            },
            {
              "originalPosition": 29,
              "body": "Should probably be name-value pair (?) per recent PR by MikeJ",
              "createdAt": "2023-08-01T03:28:59Z",
              "updatedAt": "2023-08-01T03:39:02Z"
            },
            {
              "originalPosition": 27,
              "body": "'Credential_definition' is missing..?",
              "createdAt": "2023-08-01T03:36:19Z",
              "updatedAt": "2023-08-01T03:39:02Z"
            },
            {
              "originalPosition": 1,
              "body": "Why additional example to an already existing one? https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#appendix-E.1.1.2-3",
              "createdAt": "2023-08-01T03:38:27Z",
              "updatedAt": "2023-08-01T03:39:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5giw0U",
          "commit": {
            "abbreviatedOid": "81905d7"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T11:07:10Z",
          "updatedAt": "2023-09-11T11:07:10Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n* For Cryptographic Holder Binding, a KB-JWT as defined in [@!I-D.terbu-sd-jwt-vc] MUST always be present when presenting an SD-JWT VC.\r\n```",
              "createdAt": "2023-09-11T11:07:10Z",
              "updatedAt": "2023-09-11T11:07:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5gi16m",
          "commit": {
            "abbreviatedOid": "81905d7"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T11:20:15Z",
          "updatedAt": "2023-09-11T11:20:16Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n* `claims`: OPTIONAL. A JSON object containing a list of name/value pairs, where each name identifies a claim offered in the Credential. The value can be another such object (nested data structures), or an array of such objects. To express the specifics about the claim, the most deeply nested value MAY be a JSON object that includes a following non-exhaustive list of parameters defined by this specification:\r\n```\r\nneed to align with https://github.com/openid/OpenID4VCI/pull/69/files",
              "createdAt": "2023-09-11T11:20:15Z",
              "updatedAt": "2023-09-11T11:20:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5g-IKQ",
          "commit": {
            "abbreviatedOid": "81905d7"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-14T13:30:35Z",
          "updatedAt": "2023-09-14T13:30:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Now I-D.ietf-oauth-sd-jwt-vc",
              "createdAt": "2023-09-14T13:30:36Z",
              "updatedAt": "2023-09-14T13:30:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hNt1_",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T12:57:17Z",
          "updatedAt": "2023-09-18T12:57:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "yes, added it. ",
              "createdAt": "2023-09-18T12:57:17Z",
              "updatedAt": "2023-09-18T12:57:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hNuCv",
          "commit": {
            "abbreviatedOid": "9d2ea2b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T12:57:39Z",
          "updatedAt": "2023-09-18T12:57:40Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "seems to be a mistake, removed it",
              "createdAt": "2023-09-18T12:57:40Z",
              "updatedAt": "2023-09-18T12:57:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hOCyf",
          "commit": {
            "abbreviatedOid": "81905d7"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T13:33:32Z",
          "updatedAt": "2023-09-18T13:33:32Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "adapted",
              "createdAt": "2023-09-18T13:33:32Z",
              "updatedAt": "2023-09-18T13:33:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hPYpb",
          "commit": {
            "abbreviatedOid": "2d01591"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "We discussed whether selecting credentials by algorithm using Presentation Changed is needed or not during the OSW unconference sessions on \"What does Presentation Exchange do and what parts of it do we actually need?\" (see https://self-issued.info/?p=2395).  Comments recorded from that discussion were:\r\nTable: HAIP doesn't use proof_type\r\nKristina: proof_type only makes sense for Linked Data Proofs\r\n\tAlgorithms are separate\r\nMike: In OpenID and OAuth, we tend to do algorithm negotiation in metadata\r\n\t*_signing_algs_supported, etc.\r\nBrian: The issuer's algorithm and the presentation algorithm are different\r\nBrian: Supported credential formats could be in metadata, rather than the query language\r\nKristina: You could also pre-agree to supported features and simply pass short feature set handles\r\n\r\nI personally believe that HAIP should not take a dependency on the Presentation Exchange algorithm negotiation functionality.  Rather, we should negotiate supported algorithms like we do in other OpenID and OAuth specs - with metadata.",
          "createdAt": "2023-09-18T15:55:13Z",
          "updatedAt": "2023-09-18T15:55:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Please delete the text specifying credential selection by algorithm.",
              "createdAt": "2023-09-18T15:55:13Z",
              "updatedAt": "2023-09-18T15:55:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hUunC",
          "commit": {
            "abbreviatedOid": "2d01591"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-19T09:27:43Z",
          "updatedAt": "2023-09-19T09:27:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "We can put this information into the `vp_formats` metadata parameter. However, I'm no longer convinced that this is the best way to do it simply because it moves something that belongs to the request of a certain artifact to a different structure losing the context. This means the verifier cannot differentiate what algorithms it support for a certain kind of credential. I don't see an advantage in putting this data into the client metadata. \r\n\r\nI don't buy into the dependency argument. We use PE, so we should PE for what is intended to be used for. Would you state the same for OAuth?",
              "createdAt": "2023-09-19T09:27:43Z",
              "updatedAt": "2023-09-19T09:27:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hZFTQ",
          "commit": {
            "abbreviatedOid": "2d01591"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-19T18:39:35Z",
          "updatedAt": "2023-09-19T18:39:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Credential request time is the wrong time to select algorithms because it will result in avoidable inexplicable user-visible errors.\r\n\r\nImagine a scenario where the verifier supports algorithms A and B and the Wallet supports algorithms B and C.  If algorithm knowledge is exchanged at discovery time (before the credential request), the parties will know to use algorithm B.  Whereas if a request to use algorithm A is sent (the verifier not having discovered the wallet's supported algorithms in advance), then the entire request will fail with an \"unsupported signing algorithm\" error that the end-user won't be able to do anything about.\r\n\r\nDiscovery of algorithms in advance and specifying an algorithm at request time are not equivalent in terms of facilitating good user experiences.",
              "createdAt": "2023-09-19T18:39:36Z",
              "updatedAt": "2023-09-19T18:39:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5hhINP",
          "commit": {
            "abbreviatedOid": "2d01591"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T16:30:21Z",
          "updatedAt": "2023-09-20T16:30:21Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I understand and agree with the idea to discover/negotiate algorithms ahead of request time and that works well for OpenID Connect and OpenID4VCI. However in the case of OID4VP, the verifier typically does not register with the wallet in advance, in case of a custom scheme invocation it doesn't even know the wallet (provider). So the verifier's metadata is passed in the `client_metadata` request parameter. That means we are taking about whether the format/alg values are conveyed in the `presentation_definition` or `client_metadata` request parameter. \r\n\r\nHaving said that, I checked OId4VP again and the `vp_formats` metadata parameter was defined to convey this kind of data. So I will stick to that design and modify the PR accordingly. I would like to point out that the examples given in OID4VP will need to be adopted, too (https://openid.bitbucket.io/connect/openid-4-verifiable-presentations-1_0.html#name-vc-signed-as-a-jwt-not-usin). ",
              "createdAt": "2023-09-20T16:30:21Z",
              "updatedAt": "2023-09-20T16:30:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5huGQP",
          "commit": {
            "abbreviatedOid": "66d4d8c"
          },
          "author": "TimoGlastra",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T08:55:39Z",
          "updatedAt": "2023-09-22T08:55:40Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "```suggestion\r\nThe Verifier SHOULD add a `vp_formats_supported` element to its metadata (e.g. in the `client_metadata` authorization request parameter) to let the wallet know what protection algorithms it supports in conjunction with SD-JWT VCs. The format element MUST have the key `vc+sd-jwt`, the value is an object consisting of the following elements:\r\n```",
              "createdAt": "2023-09-22T08:55:39Z",
              "updatedAt": "2023-09-22T08:55:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5huIm7",
          "commit": {
            "abbreviatedOid": "66d4d8c"
          },
          "author": "TimoGlastra",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T09:01:22Z",
          "updatedAt": "2023-09-22T09:01:29Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Is there any integration (or plants to) with the DIF Claim format Registry? \r\n\r\nThe Presentation Exchange specification links to this spec for a list of claim formats and their structure to use them within the formats property. \r\n\r\nhttps://identity.foundation/claim-format-registry/\r\n\r\n",
              "createdAt": "2023-09-22T09:01:22Z",
              "updatedAt": "2023-09-22T09:01:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h4fU5",
          "commit": {
            "abbreviatedOid": "66d4d8c"
          },
          "author": "peppelinux",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-25T13:42:41Z",
          "updatedAt": "2023-09-25T13:42:42Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I'd suggest SHOULD support pre-auth code flow and MUST auth code flow because there may be implementers that still have security concerns or implementation constraints about the pre-auth code flow\r\n\r\nFor the flow that requires a credential offer it would the best solution allowing also a pre auth code flow and not just a pre-authz code flow. This would be an issue for OpenID4VCI, so let's keep for discussion without blocking this PR if possibile",
              "createdAt": "2023-09-25T13:42:41Z",
              "updatedAt": "2023-09-25T13:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h8xmS",
          "commit": {
            "abbreviatedOid": "66d4d8c"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T04:29:53Z",
          "updatedAt": "2023-09-26T04:29:54Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "there is already issue #60 on this topic",
              "createdAt": "2023-09-26T04:29:53Z",
              "updatedAt": "2023-09-26T04:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9L7f",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:24:33Z",
          "updatedAt": "2023-09-26T06:24:33Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\n* `credential_definition`: REQUIRED. JSON object containing the detailed description of the credential type. It MUST contain at least `type` property as defined in (#server_metadata_vc_sd-jwt).\r\n```\r\nfeedback from @rohe at OSW not to duplicate defining the same term,",
              "createdAt": "2023-09-26T06:24:33Z",
              "updatedAt": "2023-09-26T06:36:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9MaB",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:26:02Z",
          "updatedAt": "2023-09-26T06:26:02Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "```suggestion\r\n* `credential_definition`: REQUIRED.  JSON object containing the detailed description of the credential type. It MUST contain at least `type` property as defined in (#server_metadata_vc_sd-jwt). It MAY contain `claims` property as defined in (#server_metadata_vc_sd-jwt).\r\n```",
              "createdAt": "2023-09-26T06:26:02Z",
              "updatedAt": "2023-09-26T06:26:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9MfP",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:26:15Z",
          "updatedAt": "2023-09-26T06:26:16Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "```suggestion\r\n* `credential_definition`: REQUIRED. JSON object containing the detailed description of the credential type. It MUST contain at least `type` property as defined in (#server_metadata_vc_sd-jwt). It MAY contain `claims` property as defined in (#server_metadata_vc_sd-jwt).\r\n```",
              "createdAt": "2023-09-26T06:26:15Z",
              "updatedAt": "2023-09-26T06:26:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9Mv_",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:27:01Z",
          "updatedAt": "2023-09-26T06:27:01Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nNote: If there is a requirement to provide the Subject\u2019s identifier assigned and maintained by the Issuer, `sub` claim MAY be used. There is no requirement for a binding to exist between `sub` and `cnf` claims. See Implementation Considerations section in [@!I-D.ietf-oauth-sd-jwt-vc].\r\n```",
              "createdAt": "2023-09-26T06:27:01Z",
              "updatedAt": "2023-09-26T06:27:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9Onh",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:32:43Z",
          "updatedAt": "2023-09-26T06:32:43Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "```suggestion\r\nThe value of the `credential` claim in the Credential Response MUST be a JSON string that is an SD-JWT VC. Credentials of this format are already suitable for transfer and, therefore, they need not and MUST NOT be re-encoded.\r\n```\r\nI don't think my suggested language is the best, but `about reusing existing browser API for wallet selection` is not clear enough and needs to be iterated.",
              "createdAt": "2023-09-26T06:32:43Z",
              "updatedAt": "2023-09-26T06:33:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9PEU",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:34:05Z",
          "updatedAt": "2023-09-26T06:34:05Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "yes, it would be ideal if we can align with the PR spec. need someone to lead it",
              "createdAt": "2023-09-26T06:34:05Z",
              "updatedAt": "2023-09-26T06:34:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9Pdn",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T06:35:14Z",
          "updatedAt": "2023-09-26T06:35:15Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "please open a separate issue in OID4VP if needed. this PR/HAIP itself is probably not a place to make this change.",
              "createdAt": "2023-09-26T06:35:15Z",
              "updatedAt": "2023-09-26T06:35:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5h9P6j",
          "commit": {
            "abbreviatedOid": "564e4e0"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "happy to approve once my suggested changes are incorporated.",
          "createdAt": "2023-09-26T06:36:35Z",
          "updatedAt": "2023-09-26T06:36:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5iT2oG",
          "commit": {
            "abbreviatedOid": "2d01591"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T17:21:19Z",
          "updatedAt": "2023-09-28T17:21:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I agree. I changed the PR to use the current approach. \r\nFiled [issue](https://github.com/openid/OpenID4VP/issues/53)",
              "createdAt": "2023-09-28T17:21:19Z",
              "updatedAt": "2023-09-28T17:21:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iT3be",
          "commit": {
            "abbreviatedOid": "66d4d8c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T17:23:26Z",
          "updatedAt": "2023-09-28T17:23:27Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "filed issue https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/issues/63",
              "createdAt": "2023-09-28T17:23:26Z",
              "updatedAt": "2023-09-28T17:23:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iT7EL",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "I'm ready to approve this after the identifier changes suggested are made.",
          "createdAt": "2023-09-28T17:32:58Z",
          "updatedAt": "2023-09-28T17:46:00Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "sub claims -> members\r\n(The current wording may confuse people into thinking we're talking about the `sub` claim.)",
              "createdAt": "2023-09-28T17:32:58Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            },
            {
              "originalPosition": 107,
              "body": "with the same language identifier -> for each language identifier",
              "createdAt": "2023-09-28T17:35:36Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            },
            {
              "originalPosition": 156,
              "body": "sd-jwt-alg -> sd-jwt_signing_alg_values_supported\r\nThis uses the metadata naming conventions in https://openid.net/specs/openid-connect-discovery-1_0.html and related OAuth specs.",
              "createdAt": "2023-09-28T17:43:02Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            },
            {
              "originalPosition": 157,
              "body": "kb-jwt-alg -> kb-jwt_signing_alg_values_supported",
              "createdAt": "2023-09-28T17:43:30Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            },
            {
              "originalPosition": 4,
              "body": "Change identifier per above.",
              "createdAt": "2023-09-28T17:44:37Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            },
            {
              "originalPosition": 8,
              "body": "Change identifier per above.",
              "createdAt": "2023-09-28T17:44:51Z",
              "updatedAt": "2023-09-28T17:46:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUH-3",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:03:52Z",
          "updatedAt": "2023-09-28T18:03:52Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n* MUST support protocol extensions for SD-JWT VC credential format profile as defined in this specification (##vc_sd_jwt_profile). \r\n```",
              "createdAt": "2023-09-28T18:03:52Z",
              "updatedAt": "2023-09-28T18:15:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUICX",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:04:00Z",
          "updatedAt": "2023-09-28T18:04:01Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n   * MUST support protocol extensions for SD-JWT VC credential format profile as defined in this specification (##vc_sd_jwt_profile). \r\n```",
              "createdAt": "2023-09-28T18:04:00Z",
              "updatedAt": "2023-09-28T18:15:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUJIR",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:07:05Z",
          "updatedAt": "2023-09-28T18:07:06Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "verifier is client to it is not discovery spec, but client registration spec that is relevant, so `sd-jwt-alg` is correct. ",
              "createdAt": "2023-09-28T18:07:05Z",
              "updatedAt": "2023-09-28T18:07:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUJbt",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:07:55Z",
          "updatedAt": "2023-09-28T18:07:56Z",
          "comments": [
            {
              "originalPosition": 164,
              "body": "```suggestion\r\n* `sd_jwt_alg`: OPTIONAL. A JSON array containing identifiers of cryptographic algorithms the verifier supports for protection of a SD-JWT. If present, the `alg` JOSE header (as defined in [@!RFC7515]) of the presented SD-JWT MUST match one of the array values.\r\n```\r\nshould probably be snake case tho",
              "createdAt": "2023-09-28T18:07:55Z",
              "updatedAt": "2023-09-28T18:07:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUJiX",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:08:14Z",
          "updatedAt": "2023-09-28T18:08:14Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "same as above",
              "createdAt": "2023-09-28T18:08:14Z",
              "updatedAt": "2023-09-28T18:08:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUJxJ",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:08:54Z",
          "updatedAt": "2023-09-28T18:08:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "as above convention-wise, this is correct",
              "createdAt": "2023-09-28T18:08:54Z",
              "updatedAt": "2023-09-28T18:08:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUJxs",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:08:56Z",
          "updatedAt": "2023-09-28T18:08:56Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "as above convention-wise, this is correct",
              "createdAt": "2023-09-28T18:08:56Z",
              "updatedAt": "2023-09-28T18:08:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUKKn",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:09:59Z",
          "updatedAt": "2023-09-28T18:10:00Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "```suggestion\r\n    \"vp_formats\": {\r\n```",
              "createdAt": "2023-09-28T18:10:00Z",
              "updatedAt": "2023-09-28T18:10:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUKcG",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:10:44Z",
          "updatedAt": "2023-09-28T18:10:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n            \"sd_jwt_alg\": [\r\n```",
              "createdAt": "2023-09-28T18:10:44Z",
              "updatedAt": "2023-09-28T18:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUKf1",
          "commit": {
            "abbreviatedOid": "a45cdf3"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:10:54Z",
          "updatedAt": "2023-09-28T18:10:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n            \"kb_jwt_alg\": [\r\n```",
              "createdAt": "2023-09-28T18:10:54Z",
              "updatedAt": "2023-09-28T18:10:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iULBN",
          "commit": {
            "abbreviatedOid": "4d35c6b"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:11:35Z",
          "updatedAt": "2023-09-28T18:11:36Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "```suggestion\r\n* `kb_jwt_alg`: OPTIONAL. A JSON array containing identifiers of cryptographic algorithms the verifier supports for protection of a KB-JWT. If present, the `alg` JOSE header (as defined in [@!RFC7515]) of the presented KB-JWT MUST match one of the array values.\r\n```",
              "createdAt": "2023-09-28T18:11:35Z",
              "updatedAt": "2023-09-28T18:11:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUNAW",
          "commit": {
            "abbreviatedOid": "cf91420"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:14:27Z",
          "updatedAt": "2023-09-28T18:14:28Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\n        * `locale`: OPTIONAL. String value that identifies language of this object represented as language tag values defined in BCP47 [@!RFC5646]. There MUST be only one object for each language identifier.\r\n```",
              "createdAt": "2023-09-28T18:14:28Z",
              "updatedAt": "2023-09-28T18:14:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iUUk6",
          "commit": {
            "abbreviatedOid": "6586bb2"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "thank you!",
          "createdAt": "2023-09-28T18:35:11Z",
          "updatedAt": "2023-10-02T17:18:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5iUVik",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:37:46Z",
          "updatedAt": "2023-09-28T18:37:47Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "changed claims to elements",
              "createdAt": "2023-09-28T18:37:47Z",
              "updatedAt": "2023-09-28T18:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iU-p2",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T20:33:53Z",
          "updatedAt": "2023-09-28T20:33:53Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "If you want examples from the client registration spec, the names are the likes of `id_token_signed_response_alg`, `userinfo_signed_response_alg`, `request_object_signing_alg`, `token_endpoint_auth_signing_alg`, etc.\r\n\r\nThe point of the requested changes is to have HAIP be clearly aligned with other related specs and the conventions used in them - and not appear to be something that was done in isolation, ignoring the way closely related specifications work.  Alignment will be good for everyone and for the acceptance of HAIP.\r\n\r\nAs a detailed point, whenever an element is a list of items, we use a plural name.  And when the list is of things supported, we use \"supported\" in the name.\r\n\r\nHence, I stand by my request to use names that will be unsurprising to people already familiar with OAuth and OpenID naming conventions:\r\n`sd-jwt-alg` -> `sd-jwt_signing_alg_values_supported`\r\n`kb-jwt-alg` -> `kb-jwt_signing_alg_values_supported`\r\n",
              "createdAt": "2023-09-28T20:33:53Z",
              "updatedAt": "2023-09-28T20:33:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iVAl-",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T20:40:03Z",
          "updatedAt": "2023-09-28T20:40:04Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "sure, sd_jwt_signing_alg might be more aligned - please open an issue or a PR to track this.\r\n\r\nbut no need for `_values_supported` because this is Client metadata and not AS metadata. ",
              "createdAt": "2023-09-28T20:40:03Z",
              "updatedAt": "2023-09-28T20:40:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iVChQ",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T20:46:02Z",
          "updatedAt": "2023-09-28T20:46:02Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "The description of the field includes\r\n> A JSON array containing identifier**s** of cryptographic algorithms the verifier **supports**\r\n\r\nIt's a list of supported values, so \"supported\" is called for.  And because it's a list, the name needs to be plural, not singular.\r\n\r\nI'm ready to approve this PR after the changes are applied.  Given I was suggesting naming alignment, I didn't expect my review comments to be at all controversial.",
              "createdAt": "2023-09-28T20:46:02Z",
              "updatedAt": "2023-09-28T20:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iiRfK",
          "commit": {
            "abbreviatedOid": "28758de"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T17:02:24Z",
          "updatedAt": "2023-10-02T17:02:24Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "```suggestion\r\n* `sd_jwt_signing_alg`: OPTIONAL. A JSON array containing identifiers of cryptographic algorithms the verifier supports for protection of a SD-JWT. If present, the `alg` JOSE header (as defined in [@!RFC7515]) of the presented SD-JWT MUST match one of the array values.\r\n```",
              "createdAt": "2023-10-02T17:02:24Z",
              "updatedAt": "2023-10-02T17:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iiRmJ",
          "commit": {
            "abbreviatedOid": "28758de"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T17:02:44Z",
          "updatedAt": "2023-10-02T17:02:44Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "```suggestion\r\n* `kb_jwt_signing_alg`: OPTIONAL. A JSON array containing identifiers of cryptographic algorithms the verifier supports for protection of a KB-JWT. If present, the `alg` JOSE header (as defined in [@!RFC7515]) of the presented KB-JWT MUST match one of the array values.\r\n```",
              "createdAt": "2023-10-02T17:02:44Z",
              "updatedAt": "2023-10-02T17:02:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iiRqz",
          "commit": {
            "abbreviatedOid": "28758de"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T17:02:55Z",
          "updatedAt": "2023-10-02T17:02:55Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n            \"sd_jwt_signing_alg\": [\r\n```",
              "createdAt": "2023-10-02T17:02:55Z",
              "updatedAt": "2023-10-02T17:03:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iiRuV",
          "commit": {
            "abbreviatedOid": "28758de"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T17:03:05Z",
          "updatedAt": "2023-10-02T17:03:05Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n            \"kb_jwt_signing_alg\": [\r\n```",
              "createdAt": "2023-10-02T17:03:05Z",
              "updatedAt": "2023-10-02T17:03:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5iiSDP",
          "commit": {
            "abbreviatedOid": "49fe756"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T17:04:03Z",
          "updatedAt": "2023-10-02T17:04:04Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "@selfissued these are the specs we are aligning to because verifier is the client,\r\nhttps://openid.net/specs/openid-connect-registration-1_0.html\r\nhttps://datatracker.ietf.org/doc/html/rfc7591\r\nand the convention here is not to use `_supported` - please check.\r\n\r\nI made changes to `*_signng_alg` - please re-review",
              "createdAt": "2023-10-02T17:04:03Z",
              "updatedAt": "2023-10-02T17:04:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJcWsFs5i0wg1",
          "commit": {
            "abbreviatedOid": "ba10db9"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-10-04T16:04:27Z",
          "updatedAt": "2023-10-04T16:04:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOJcWsFs5VyZId",
      "title": "add reference to status list",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/57",
      "state": "MERGED",
      "author": "paulbastian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses # <!-- Issue # here -->\r\n\r\n## \ud83d\udcd1 Description\r\n<!-- Add a brief description of the pr -->\r\n\r\n<!-- You can also choose to add a list of changes and if they have been completed or not by using the markdown to-do list syntax\r\n- [ ] Not Completed\r\n- [x] Completed\r\n-->\r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://github.com/<repo-name>/<branch-name>/<draft-name>.html)",
      "createdAt": "2023-07-18T13:36:53Z",
      "updatedAt": "2023-09-09T17:08:46Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "46d2332b3d86e9125c876e84adea0836952ccb15",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "statuslist",
      "headRefOid": "19edf4e4dfe1628f42ae2ac5d1173d675c514b63",
      "closedAt": "2023-09-09T17:08:46Z",
      "mergedAt": "2023-09-09T17:08:46Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "a4a34c3ede0367c90319685c5ff4b86a5767700e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5bwdRp",
          "commit": {
            "abbreviatedOid": "19edf4e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-20T14:38:12Z",
          "updatedAt": "2023-07-20T14:38:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJcWsFs5gev6J",
          "commit": {
            "abbreviatedOid": "19edf4e"
          },
          "author": "Sakurann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-09T17:08:38Z",
          "updatedAt": "2023-09-09T17:08:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOJcWsFs5aUzwA",
      "title": "Mike's First Editorial Suggestions",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/61",
      "state": "OPEN",
      "author": "selfissued",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Reference draft-ietf-oauth-attestation-based-client-auth and draft-ietf-oauth-sd-jwt-vc.\r\nDelete statements about PRs that have been merged.",
      "createdAt": "2023-09-14T10:13:16Z",
      "updatedAt": "2023-09-18T17:39:00Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a4a34c3ede0367c90319685c5ff4b86a5767700e",
      "headRepository": "selfissued/oid4vc-haip-sd-jwt-vc",
      "headRefName": "mbj-initial-editorial",
      "headRefOid": "7e7cee23f2a59672340f8d72dadea7c8d5e1510b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR conflicts with a couple of changes I did in PRs 52 and 56. Not sure how we best cope with it. ",
          "createdAt": "2023-09-18T17:39:00Z",
          "updatedAt": "2023-09-18T17:39:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOJcWsFs5doqjZ",
      "title": "Issuer metadata",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/66",
      "state": "OPEN",
      "author": "paulbastian",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses # <!-- Issue # here -->\r\n\r\n## \ud83d\udcd1 Description\r\nSome fixes and changes according to https://github.com/openid/OpenID4VCI/pull/86\r\n\r\n<!-- You can also choose to add a list of changes and if they have been completed or not by using the markdown to-do list syntax\r\n- [ ] Not Completed\r\n- [x] Completed\r\n-->\r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://github.com/<repo-name>/<branch-name>/<draft-name>.html)",
      "createdAt": "2023-10-24T12:31:04Z",
      "updatedAt": "2023-11-03T12:03:35Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "05f20e75cbab9d84dc52458cfaa9ce589b76e0b6",
      "headRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "headRefName": "pb/issuerMetadata",
      "headRefOid": "e9f583b6859f861e6e3d25941ad2391e79ceb680",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5ltTCt",
          "commit": {
            "abbreviatedOid": "a80caf4"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-31T13:55:21Z",
          "updatedAt": "2023-10-31T13:55:21Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "is type really needed?",
              "createdAt": "2023-10-31T13:55:21Z",
              "updatedAt": "2023-10-31T13:55:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOJcWsFs5ePSCc",
      "title": "Update status list reference",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/70",
      "state": "OPEN",
      "author": "c2bo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Changes the reference to the adopted datatracker ID\r\n",
      "createdAt": "2023-10-31T14:16:41Z",
      "updatedAt": "2023-10-31T14:29:24Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "05f20e75cbab9d84dc52458cfaa9ce589b76e0b6",
      "headRepository": "c2bo/oid4vc-haip-sd-jwt-vc",
      "headRefName": "status-list-reference",
      "headRefOid": "0d1a4e40b069c6107ab66e3fb18352c180bdf129",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJcWsFs5ltoVB",
          "commit": {
            "abbreviatedOid": "0d1a4e4"
          },
          "author": "paulbastian",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-31T14:29:24Z",
          "updatedAt": "2023-10-31T14:29:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOJcWsFs5esPsC",
      "title": "fix: vp_formats for client metadata, not vp_formats_supported",
      "url": "https://github.com/vcstuff/oid4vc-haip-sd-jwt-vc/pull/72",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "According to:\r\n\r\n- [OpenID4VP Section-5.1-9 ](https://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#section-5.1-9)\r\n- the non-normative example reported below, \r\n\r\n`vp_formats_supported` belongs to the wallet metadata and not to the verifier metadata/request\r\n\r\n````\r\nThe following is a non-normative example of client_metadata request parameter value in a request to present a SD-JWT VC.\r\n\r\n{\r\n    \"vp_formats\": {\r\n        \"vc+sd-jwt\": {\r\n            \"sd-jwt_alg_values\": [\r\n                \"ES256\",\r\n                \"ES384\"\r\n            ],\r\n            \"kb-jwt_alg_values\": [\r\n                \"ES256\",\r\n                \"ES384\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n````\r\n\r\nfor this reason this PR changed `vp_formats_supported` in `vp_formats` because it is related to verifier's metadata",
      "createdAt": "2023-11-06T13:47:39Z",
      "updatedAt": "2023-11-06T13:47:39Z",
      "baseRepository": "vcstuff/oid4vc-haip-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "05f20e75cbab9d84dc52458cfaa9ce589b76e0b6",
      "headRepository": "peppelinux/high-assurance-profile",
      "headRefName": "patch-2",
      "headRefOid": "f2f63698ef68892234c4fc3b60177046aeee2b48",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}